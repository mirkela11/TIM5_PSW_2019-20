{"version":3,"sources":["$_lazy_route_resource lazy namespace object","src/app/app.component.html","src/app/components/activated-account-patient/activated-account-patient.component.html","src/app/components/add-clinic-administrator/add-clinic-administrator.component.html","src/app/components/add-clinic/add-clinic.component.html","src/app/components/admin-clinic-profile/admin-clinic-profile.component.html","src/app/components/clinic-search-dialog/clinic-search-dialog.component.html","src/app/components/clinics-list-patient/clinics-list.component.html","src/app/components/diagnose/diagnose.component.html","src/app/components/doctor-list-patient/doctor-list-patient.component.html","src/app/components/doctor-medical-record/doctor-medical-record.component.html","src/app/components/doctor-profile/doctor-profile.component.html","src/app/components/doctor-search-dialog/doctor-search-dialog.component.html","src/app/components/doctor-vacation-request/doctor-vacation-request.component.html","src/app/components/home-page-admin-clinic/home-page-admin-clinic.component.html","src/app/components/home-page-clinical-centre-administrator/home-page-clinical-centre-administrator.component.html","src/app/components/home-page-doctor/home-page-doctor.component.html","src/app/components/home-page-nurse/home-page-nurse.component.html","src/app/components/home-page-patient/home-page-patient.component.html","src/app/components/home/home.component.html","src/app/components/login/login.component.html","src/app/components/medical-history-patient/medical-history-patient.component.html","src/app/components/medical-record-dialog/medical-record-dialog.component.html","src/app/components/medical-record-patient/medical-record-patient.component.html","src/app/components/medicaments/medicaments.component.html","src/app/components/nurse-date-picker/nurse-date-picker.component.html","src/app/components/nurse-list-patient/nurse-list-patient.component.html","src/app/components/nurse-profile/nurse-profile.component.html","src/app/components/nurse-vacation-request/nurse-vacation-request.component.html","src/app/components/patient-make-examination/patient-make-examination.component.html","src/app/components/patient-profile/patient-profile.component.html","src/app/components/predef-examination-dialog/predef-examination-dialog.component.html","src/app/components/rate-doctor-and-clinic-patient/rate-doctor-and-clinic-patient.component.html","src/app/components/register-requests/register-requests.component.html","src/app/components/registration/registration.component.html","src/app/components/vacation-request-register/vacation-request-register.component.html","node_modules/tslib/tslib.es6.js","src/app/app-routing.module.ts","src/app/app.component.css","src/app/app.component.ts","src/app/app.module.ts","src/app/components/activated-account-patient/activated-account-patient.component.css","src/app/components/activated-account-patient/activated-account-patient.component.ts","src/app/components/add-clinic-administrator/add-clinic-administrator.component.css","src/app/components/add-clinic-administrator/add-clinic-administrator.component.ts","src/app/components/add-clinic/add-clinic.component.css","src/app/components/add-clinic/add-clinic.component.ts","src/app/components/admin-clinic-profile/admin-clinic-profile.component.css","src/app/components/admin-clinic-profile/admin-clinic-profile.component.ts","src/app/components/clinic-search-dialog/clinic-search-dialog.component.css","src/app/components/clinic-search-dialog/clinic-search-dialog.component.ts","src/app/components/clinics-list-patient/clinics-list.component.css","src/app/components/clinics-list-patient/clinics-list.component.ts","src/app/components/diagnose/diagnose.component.css","src/app/components/diagnose/diagnose.component.ts","src/app/components/doctor-list-patient/doctor-list-patient.component.css","src/app/components/doctor-list-patient/doctor-list-patient.component.ts","src/app/components/doctor-medical-record/doctor-medical-record.component.css","src/app/components/doctor-medical-record/doctor-medical-record.component.ts","src/app/components/doctor-profile/doctor-profile.component.css","src/app/components/doctor-profile/doctor-profile.component.ts","src/app/components/doctor-search-dialog/doctor-search-dialog.component.css","src/app/components/doctor-search-dialog/doctor-search-dialog.component.ts","src/app/components/doctor-vacation-request/doctor-vacation-request.component.css","src/app/components/doctor-vacation-request/doctor-vacation-request.component.ts","src/app/components/home-page-admin-clinic/home-page-admin-clinic.component.css","src/app/components/home-page-admin-clinic/home-page-admin-clinic.component.ts","src/app/components/home-page-clinical-centre-administrator/home-page-clinical-centre-administrator.component.css","src/app/components/home-page-clinical-centre-administrator/home-page-clinical-centre-administrator.component.ts","src/app/components/home-page-doctor/home-page-doctor.component.css","src/app/components/home-page-doctor/home-page-doctor.component.ts","src/app/components/home-page-nurse/home-page-nurse.component.css","src/app/components/home-page-nurse/home-page-nurse.component.ts","src/app/components/home-page-patient/home-page-patient.component.css","src/app/components/home-page-patient/home-page-patient.component.ts","src/app/components/home/home.component.css","src/app/components/home/home.component.ts","src/app/components/login/login.component.css","src/app/components/login/login.component.ts","src/app/components/medical-history-patient/medical-history-patient.component.css","src/app/components/medical-history-patient/medical-history-patient.component.ts","src/app/components/medical-record-dialog/medical-record-dialog.component.css","src/app/components/medical-record-dialog/medical-record-dialog.component.ts","src/app/components/medical-record-patient/medical-record-patient.component.css","src/app/components/medical-record-patient/medical-record-patient.component.ts","src/app/components/medicaments/medicaments.component.css","src/app/components/medicaments/medicaments.component.ts","src/app/components/nurse-date-picker/nurse-date-picker.component.css","src/app/components/nurse-date-picker/nurse-date-picker.component.ts","src/app/components/nurse-list-patient/nurse-list-patient.component.css","src/app/components/nurse-list-patient/nurse-list-patient.component.ts","src/app/components/nurse-profile/nurse-profile.component.css","src/app/components/nurse-profile/nurse-profile.component.ts","src/app/components/nurse-vacation-request/nurse-vacation-request.component.css","src/app/components/nurse-vacation-request/nurse-vacation-request.component.ts","src/app/components/patient-make-examination/patient-make-examination.component.css","src/app/components/patient-make-examination/patient-make-examination.component.ts","src/app/components/patient-profile/patient-profile.component.css","src/app/components/patient-profile/patient-profile.component.ts","src/app/components/predef-examination-dialog/predef-examination-dialog.component.css","src/app/components/predef-examination-dialog/predef-examination-dialog.component.ts","src/app/components/rate-doctor-and-clinic-patient/rate-doctor-and-clinic-patient.component.css","src/app/components/rate-doctor-and-clinic-patient/rate-doctor-and-clinic-patient.component.ts","src/app/components/register-requests/register-requests.component.css","src/app/components/register-requests/register-requests.component.ts","src/app/components/registration/registration.component.css","src/app/components/registration/registration.component.ts","src/app/components/vacation-request-register/vacation-request-register.component.css","src/app/components/vacation-request-register/vacation-request-register.component.ts","src/app/material-module.ts","src/app/model/ClinicalCentreAdministrator.ts","src/app/model/Diagnose.ts","src/app/model/Medicaments.ts","src/app/model/Zahtev.ts","src/app/model/ZahtevStatus.ts","src/app/model/adminClinic.ts","src/app/model/adminClinicStatus.ts","src/app/model/clinic.ts","src/app/model/doctor.ts","src/app/model/examination.ts","src/app/model/examinationKind.ts","src/app/model/examinationReport.ts","src/app/model/examinationStatus.ts","src/app/model/examinationType.ts","src/app/model/medicalRecord.ts","src/app/model/nurse.ts","src/app/model/patient.ts","src/app/model/patientStatus.ts","src/app/model/role.ts","src/app/model/user.ts","src/app/services/admin-clinic.service.ts","src/app/services/clinic.service.ts","src/app/services/clinical-centre-administrator.service.ts","src/app/services/diagnose.service.ts","src/app/services/doctor.service.ts","src/app/services/examination-type.service.ts","src/app/services/examination.service.ts","src/app/services/medical-record.service.ts","src/app/services/medicaments.service.ts","src/app/services/nurse-service.service.ts","src/app/services/patient.service.ts","src/app/services/user-service.service.ts","src/app/services/vacation.service.ts","src/environments/environment.ts","src/main.ts"],"names":[],"mappings":"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","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export default \"<mat-sidenav-container class=\\\"sidenav-container\\\">\\r\\n  <mat-sidenav #drawer class=\\\"sidenav\\\" fixedInViewport [attr.role]=\\\"(isHandset$ | async) ? 'dialog' : 'navigation'\\\"\\r\\n               [mode]=\\\"(isHandset$ | async) ? 'over' : 'side'\\\" [opened]=\\\"(isHandset$ | async) === true\\\">\\r\\n\\r\\n    <mat-toolbar color=\\\"accent\\\">Menu</mat-toolbar>\\r\\n    <mat-nav-list *ngIf = \\\"isNone()\\\">\\r\\n      <a mat-list-item routerLink=\\\"/login\\\">Login</a>\\r\\n      <a mat-list-item routerLink=\\\"/patient/register\\\">Register</a>\\r\\n    </mat-nav-list>\\r\\n\\r\\n    <mat-nav-list *ngIf=\\\"isPatient()\\\">\\r\\n      <a mat-list-item routerLink=\\\"/patient/profile\\\">Profile</a>\\r\\n      <a mat-list-item routerLink=\\\"/patient/medicalRecord\\\">Medical record</a>\\r\\n      <a mat-list-item routerLink=\\\"/patient/medicalHistory\\\">Medical history</a>\\r\\n      <a mat-list-item routerLink=\\\"/patient/clinics\\\">Clinics</a>\\r\\n      <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n    </mat-nav-list>\\r\\n\\r\\n    <mat-nav-list *ngIf=\\\"isDoctor()\\\">\\r\\n      <a mat-list-item routerLink=\\\"/doctor/list_of_patients\\\">List of patients</a>\\r\\n      <a mat-list-item routerLink=\\\"/doctor/exemination\\\">Exemination</a>\\r\\n      <a mat-list-item routerLink=\\\"/doctor/work_calendar\\\">Work calendar</a>\\r\\n      <a mat-list-item routerLink=\\\"/doctor/requests\\\">Requests</a>\\r\\n      <a mat-list-item routerLink=\\\"/doctor/operations\\\">Operations</a>\\r\\n      <a mat-list-item routerLink=\\\"/doctor/profile\\\">Profile</a>\\r\\n      <a mat-list-item routerLink=\\\"/doctor/VacationRequest\\\">VacationRequest</a>\\r\\n      <a mat-list-item routerLink=\\\"/doctor/MedicalRecord\\\">MedicalRecords</a>\\r\\n      <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n    </mat-nav-list>\\r\\n\\r\\n    <mat-nav-list *ngIf=\\\"isClinicAdmin()\\\">\\r\\n      <a mat-list-item routerLink=\\\"/admin_clinic/profile\\\">Profile</a>\\r\\n      <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n    </mat-nav-list>\\r\\n\\r\\n    <mat-nav-list *ngIf=\\\"isNurse()\\\">\\r\\n      <a mat-list-item routerLink=\\\"/nurse/profile\\\">Profile</a>\\r\\n      <a mat-list-item routerLink=\\\"/nurse/ListOfPatient\\\">List Of Patients</a>\\r\\n      <a mat-list-item routerLink=\\\"/nurse/WorkCalendar\\\">WorkCalendar</a>\\r\\n      <a mat-list-item routerLink=\\\"/nurse/VacationRequest\\\">Vacation requests</a>\\r\\n      <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n    </mat-nav-list>\\r\\n\\r\\n    <mat-nav-list *ngIf=\\\"isClinicalCentreAdmin()\\\">\\r\\n      <a mat-list-item routerLink=\\\"/clinical-centre-admin/profile\\\">Profile</a>\\r\\n      <a mat-list-item routerLink=\\\"/clinical-centre-admin/addClinic\\\">Add Clinic</a>\\r\\n      <a mat-list-item routerLink=\\\"/clinical-centre-admin/addAdmins\\\">Add Administrator</a>\\r\\n      <a mat-list-item routerLink=\\\"/clinical-centre-admin/requests\\\">Requests</a>\\r\\n      <a mat-list-item routerLink=\\\"/clinical-centre-admin/VacationRequests\\\">Vacation Requests</a>\\r\\n      <a mat-list-item routerLink=\\\"/clinical-centre-admin/addDiagnose\\\">Add Diagnose</a>\\r\\n      <a mat-list-item routerLink=\\\"/clinical-centre-admin/addMedicament\\\">Add Medicament</a>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n      <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n    </mat-nav-list>\\r\\n\\r\\n  </mat-sidenav>\\r\\n  <mat-sidenav-content>\\r\\n    <mat-toolbar color=\\\"accent\\\">\\r\\n      <button type=\\\"button\\\" aria-label=\\\"Toggle sidenav\\\" mat-icon-button (click)=\\\"drawer.toggle()\\\">\\r\\n        <mat-icon aria-label=\\\"Side nav toggle icon\\\">menu</mat-icon>\\r\\n      </button>\\r\\n      <span>Clinical Centre</span>\\r\\n    </mat-toolbar>\\r\\n    <!-- Add Content Here -->\\r\\n    <router-outlet></router-outlet>\\r\\n  </mat-sidenav-content>\\r\\n</mat-sidenav-container>\\r\\n\"","export default \"<div *ngIf=\\\"success\\\" class=\\\"main-content\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\n        <mat-card>\\n          <h3>Account activated successfully!</h3>\\n          <hr>\\n          <p>Success! Your account is now active.</p>\\n          <p><span><a href=\\\"http://localhost:8081\\\">Login page</a></span></p>\\n        </mat-card>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"addClinicAdministratorForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <mat-label for=\\\"email\\\">Email</mat-label>\\r\\n              <input type=\\\"email\\\"  id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addClinicAdministratorForm.get('email').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && addClinicAdministratorForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addClinicAdministratorForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"addClinicAdministratorForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addClinicAdministratorForm.get('password').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && addClinicAdministratorForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addClinicAdministratorForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                <div *ngIf=\\\"addClinicAdministratorForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                  long</div>\\r\\n                <div *ngIf=\\\"addClinicAdministratorForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                  1 uppercase letter\\r\\n                  and 1 number</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">First Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addClinicAdministratorForm.get('name').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addClinicAdministratorForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" addClinicAdministratorForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Last Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addClinicAdministratorForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addClinicAdministratorForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addClinicAdministratorForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"number\\\">Phone Number</label>\\r\\n              <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addClinicAdministratorForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addClinicAdministratorForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addClinicAdministratorForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                <div *ngIf=\\\"addClinicAdministratorForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n\\r\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n\\r\\n          </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table\\r\\n       [dataSource]=\\\"dataSource\\\" multiTemplateDataRows\\r\\n       class=\\\"mat-elevation-z8\\\">\\r\\n  <ng-container matColumnDef=\\\"{{column}}\\\" *ngFor=\\\"let column of displayedColumns\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> {{column}} </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element[column]}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let element; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n<mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Add Clinic</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"addClinicForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">Name</label>\\r\\n              <input type=\\\"name\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addClinicForm.get('name').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && addClinicForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addClinicForm.get('name').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"addClinicForm.get('name').errors['name']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"address\\\">Address</label>\\r\\n              <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addClinicForm.get('address').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addClinicForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addClinicForm.get('address').errors['required']\\\">Address is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"description\\\">Description</label>\\r\\n              <input type=\\\"text\\\" id=\\\"description\\\" formControlName=\\\"description\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addClinicForm.get('description').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addClinicForm.get('description').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addClinicForm.get('description').errors['required']\\\">Country is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"grade\\\">Grade</label>\\r\\n              <input type=\\\"grade\\\" id=\\\"grade\\\" formControlName=\\\"grade\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addClinicForm.get('grade').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addClinicForm.get('grade').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addClinicForm.get('grade').errors['required']\\\">Phone Number is required</div>\\r\\n                <div *ngIf=\\\"addClinicForm.get('grade').errors['minlength']\\\">A phone number must have at least 9\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <button mat-raised-button style=\\\"position: center\\\" color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n          </form>\\r\\n\\r\\n\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table\\r\\n       [dataSource]=\\\"dataSource\\\" multiTemplateDataRows\\r\\n       class=\\\"mat-elevation-z8\\\">\\r\\n  <ng-container matColumnDef=\\\"{{column}}\\\" *ngFor=\\\"let column of displayedColumns\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> {{column}} </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element[column]}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let element; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n<mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"adminClinicProfileForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <mat-label for=\\\"email\\\">Email</mat-label>\\r\\n              <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && adminClinicProfileForm.get('email').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && adminClinicProfileForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"adminClinicProfileForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"adminClinicProfileForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && adminClinicProfileForm.get('password').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && adminClinicProfileForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"adminClinicProfileForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                <div *ngIf=\\\"adminClinicProfileForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                  long</div>\\r\\n                <div *ngIf=\\\"adminClinicProfileForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                  1 uppercase letter\\r\\n                  and 1 number</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">First Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && adminClinicProfileForm.get('name').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && adminClinicProfileForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" adminClinicProfileForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Last Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && adminClinicProfileForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && adminClinicProfileForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"adminClinicProfileForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"number\\\">Phone Number</label>\\r\\n              <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && adminClinicProfileForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && adminClinicProfileForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"adminClinicProfileForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                <div *ngIf=\\\"adminClinicProfileForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n\\r\\n          </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<h2 mat-dialog-title>Search for clinics</h2>\\r\\n\\r\\n<mat-dialog-content [formGroup]=\\\"SearchClinicsGroup\\\">\\r\\n  <div>\\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input required=\\\"required\\\" matInput id=\\\"date\\\" formControlName = \\\"date\\\" [matDatepickerFilter]=\\\"myFilter\\\" [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\r\\n      <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n      <mat-datepicker #picker></mat-datepicker>\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n  <div>\\r\\n    <mat-form-field>\\r\\n      <mat-select required=\\\"required\\\" id=\\\"type\\\" formControlName = \\\"type\\\" placeholder=\\\"Select examination type\\\">\\r\\n        <mat-option *ngFor=\\\"let examination_type of types\\\" value=\\\"{{examination_type.label}}\\\">{{examination_type.label}}</mat-option>\\r\\n      </mat-select>\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n  <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\r\\n  <button class=\\\"mat-raised-button mat-primary\\\"(click)=\\\"save()\\\">Search</button>\\r\\n</mat-dialog-actions>\\r\\n\"","export default \"<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table\\r\\n       [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Name\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Clinic name </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Address\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Clinic address </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.address}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"ClinicRating\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Clinic rating </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.clinicRating}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Doctors\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Doctors </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n      <button mat-flat-button color=\\\"warn\\\" (click)=\\\"doctorList(element)\\\"> Doctors </button>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n<mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n<button mat-raised-button color=\\\"primary\\\" (click)=\\\"openDialog()\\\">Search</button>\\r\\n<button mat-raised-button color=\\\"accent\\\" (click)=\\\"predefDialog()\\\">Predef examinations</button>\\r\\n\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Add Diagnose</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"addDiagnoseForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"id\\\">ID</label>\\r\\n              <input type=\\\"text\\\" id=\\\"id\\\" formControlName=\\\"id\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addDiagnoseForm.get('id').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && addDiagnoseForm.get('id').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addDiagnoseForm.get('id').errors['required']\\\">Id is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"title\\\">Title</label>\\r\\n              <input type=\\\"text\\\" id=\\\"title\\\" formControlName=\\\"title\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addDiagnoseForm.get('title').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addDiagnoseForm.get('title').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addDiagnoseForm.get('title').errors['required']\\\">Title is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"description\\\">Description</label>\\r\\n              <input type=\\\"text\\\" id=\\\"description\\\" formControlName=\\\"description\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addDiagnoseForm.get('description').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addDiagnoseForm.get('description').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addDiagnoseForm.get('description').errors['required']\\\">Description is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <button mat-raised-button style=\\\"position: center\\\" color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n          </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table\\r\\n       [dataSource]=\\\"dataSource\\\" multiTemplateDataRows\\r\\n       class=\\\"mat-elevation-z8\\\">\\r\\n  <ng-container matColumnDef=\\\"{{column}}\\\" *ngFor=\\\"let column of displayedColumns\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> {{column}} </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element[column]}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let element; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n<mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n\\r\\n\"","export default \"<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table\\r\\n       [dataSource]=\\\"doctorDataSource\\\" class=\\\"mat-elevation-z8\\\" matSort>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Name\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Doctor name </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Surname\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Doctor surname </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.surname}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"DoctorRating\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Doctor rating </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.doctorRating}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Price\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Price </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.specialized.price}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Make\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Schedule it </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"make(element)\\\">Schedule it</button>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n<mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n<button mat-raised-button color=\\\"primary\\\" (click)=\\\"searchDoctors()\\\">Search</button>\\r\\n<mat-dialog-actions>\\r\\n  <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\r\\n</mat-dialog-actions>\\r\\n\"","export default \"<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table [dataSource]=\\\"DataSource\\\" class=\\\"mat-elevation-z8\\\">\\r\\n\\r\\n  <ng-container matColumnDef=\\\"startTime\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Start time </th>\\r\\n    <td mat-cell *matCellDef=\\\"let examination\\\"> {{examination.interval.startTime}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"endTime\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> End Time </th>\\r\\n    <td mat-cell *matCellDef=\\\"let examination\\\"> {{examination.interval.endTime}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"patientName\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Name </th>\\r\\n    <td mat-cell *matCellDef=\\\"let examination\\\"> {{examination.patient.name}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"patientSurname\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Surname </th>\\r\\n    <td mat-cell *matCellDef=\\\"let examination\\\"> {{examination.patient.surname}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Edit\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Edit </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n      <button mat-flat-button color=\\\"warn\\\" (click)=\\\"edit(element)\\\"> Edit </button>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"doctorProfileForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <mat-label for=\\\"email\\\">Email</mat-label>\\r\\n              <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('email').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('password').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                  long</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                  1 uppercase letter\\r\\n                  and 1 number</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">First Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('name').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" doctorProfileForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Last Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"number\\\">Phone Number</label>\\r\\n              <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"workHoursFrom\\\">Work hours from</label>\\r\\n              <input type=\\\"number\\\" id=\\\"workHoursFrom\\\" formControlName=\\\"workHoursFrom\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['required']\\\">Work hours from is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['minlength']\\\">A work hours must have at least 2\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"workHoursTo\\\">Work hours to</label>\\r\\n              <input type=\\\"number\\\" id=\\\"workHoursTo\\\" formControlName=\\\"workHoursTo\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['required']\\\">Work hours to is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['minlength']\\\">A work hours to must have at least 2\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n\\r\\n          </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<h2 mat-dialog-title>Search for doctors</h2>\\r\\n<mat-dialog-content [formGroup]=\\\"SearchDoctorGroup\\\">\\r\\n  <div>\\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input required=\\\"required\\\" id=\\\"name\\\" formControlName=\\\"name\\\" matInput placeholder=\\\"Doctor name\\\">\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n  <div>\\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input required=\\\"required\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" matInput placeholder=\\\"Doctor surname\\\">\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n  <div>\\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input required=\\\"required\\\" id=\\\"rating\\\" formControlName=\\\"rating\\\" matInput placeholder=\\\"Doctor rating\\\">\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n  <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\r\\n  <button class=\\\"mat-raised-button mat-primary\\\"(click)=\\\"save()\\\">Save</button>\\r\\n</mat-dialog-actions>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Vacation request</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"vacationRequestForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"email\\\">EMAIL</label>\\r\\n              <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('email').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && vacationRequestForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('name').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && vacationRequestForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('name').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('name').errors['name']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Surname</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && vacationRequestForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('surname').errors['surname']\\\">Address is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"startingDate\\\">StartingDate</label>\\r\\n              <input type=\\\"text\\\" id=\\\"startingDate\\\" formControlName=\\\"startingDate\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('startingDate').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && vacationRequestForm.get('startingDate').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('startingDate').errors['required']\\\">Country is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"finishDate\\\">FinishDate</label>\\r\\n              <input type=\\\"text\\\" id=\\\"finishDate\\\" formControlName=\\\"finishDate\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('finishDate').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && vacationRequestForm.get('finishDate').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('finishDate').errors['required']\\\">Phone Number is required</div>\\r\\n                digits\\r\\n              </div>\\r\\n            </div>\\r\\n            <button mat-raised-button style=\\\"position: center\\\" color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n          </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<p>Welcome</p>\\r\\n\"","export default \"\"","export default \"<p>home-page-doctor works!</p>\\r\\n\"","export default \"<p>nurse-home-page works!</p>\\r\\n\"","export default \"<h3>Welcome</h3>\\r\\n\"","export default \"<div class=\\\"image\\\">\\r\\n  <img src=\\\"2.jpg\\\">\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\n        <mat-card>\\n          <h3>Login</h3>\\n          <hr>\\n          <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"email\\\">Email</label>\\n              <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\">\\n              <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\n                <div *ngIf=\\\"f.email.errors.email\\\">Email must be a valid email address</div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"password\\\">Password</label>\\n              <input type=\\\"password\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\">\\n              <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n                <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 8 characters long</div>\\n                <div *ngIf=\\\"f.password.errors.pattern\\\">Password must contain at least 1 lowercase, 1 uppercase letter and 1 number</div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <a routerLink=\\\"/patient/register\\\">Don't have an account? Register here.</a>\\n            </div>\\n\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Login</button>\\n\\n          </form>\\n        </mat-card>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table [dataSource]=\\\"medicalDataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Kind\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Kind </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n      <div *ngIf=\\\"element.kind === 1; else elseBlock\\\">Operation</div>\\r\\n      <ng-template #elseBlock>Examination</ng-template>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n  <ng-container matColumnDef=\\\"Clinic\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Clinic </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.clinic.name}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Doctor\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Doctor </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n      <div *ngFor=\\\"let doctor of element.doctors\\\">{{doctor.name}}</div>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"StartTime\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Start date and time </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.interval.startTime}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"EndTime\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> End date and time </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.interval.endTime}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Rate\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Rate </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n      <button mat-raised-button color=\\\"warn\\\" (click)=\\\"rate(element)\\\">Rate</button>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"medicalRecordForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div>\\r\\n              <mat-form-field class=\\\"form-group\\\">\\r\\n                <input type=\\\"text\\\" id=\\\"height\\\" formControlName=\\\"height\\\"  class=\\\"form-control\\\" matInput placeholder=\\\"Height\\\"\\r\\n                [ngClass]=\\\"{ 'is-invalid': submitted && medicalRecordForm.get('height').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && medicalRecordForm.get('height').errors\\\" class=\\\"invalid-feedback\\\"></div>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div>\\r\\n              <mat-form-field class=\\\"form-group\\\">\\r\\n                <input type=\\\"text\\\" id=\\\"weight\\\" formControlName=\\\"weight\\\"  class=\\\"form-control\\\" matInput placeholder=\\\"Weight\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && medicalRecordForm.get('weight').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && medicalRecordForm.get('weight').errors\\\" class=\\\"invalid-feedback\\\"></div>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div>\\r\\n              <mat-form-field class=\\\"form-group\\\">\\r\\n                <input type=\\\"text\\\" id=\\\"bloodType\\\" formControlName=\\\"bloodType\\\"  class=\\\"form-control\\\" matInput placeholder=\\\"Blood Type\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && medicalRecordForm.get('bloodType').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && medicalRecordForm.get('bloodType').errors\\\" class=\\\"invalid-feedback\\\"></div>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div>\\r\\n              <mat-form-field class=\\\"form-group\\\">\\r\\n                <input type=\\\"text\\\" id=\\\"allergies\\\" formControlName=\\\"allergies\\\"  class=\\\"form-control\\\" matInput placeholder=\\\"Allergies\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && medicalRecordForm.get('allergies').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && medicalRecordForm.get('allergies').errors\\\" class=\\\"invalid-feedback\\\"></div>\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n            <div>\\r\\n              <mat-form-field class=\\\"form-group\\\">\\r\\n                <input type=\\\"text\\\" id=\\\"reports\\\" formControlName=\\\"reports\\\"  class=\\\"form-control\\\" matInput placeholder=\\\"Reports\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && medicalRecordForm.get('reports').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && medicalRecordForm.get('reports').errors\\\" class=\\\"invalid-feedback\\\"></div>\\r\\n              </mat-form-field>\\r\\n\\r\\n            </div>\\r\\n            <button  mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n\\r\\n          </form>\\r\\n          <div mat-dialog-actions align=\\\"end\\\">\\r\\n            <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\r\\n          </div>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Medical Record</h3>\\r\\n          <hr>\\r\\n            <form class=\\\"medicalRecordForm\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                  <input readonly=\\\"readonly\\\" matInput placeholder=\\\"Height\\\" value=\\\"{{height}}\\\">\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                  <input readonly=\\\"readonly\\\" matInput placeholder=\\\"Weight\\\" value=\\\"{{weight}}\\\">\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                  <input readonly=\\\"readonly\\\" matInput placeholder=\\\"Blood type\\\" value=\\\"{{bloodType}}\\\">\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <mat-form-field class=\\\"toast-top-full-width\\\">\\r\\n                  <textarea readonly=\\\"readonly\\\" matInput placeholder=\\\"Allergies\\\" value=\\\"{{allergies}}\\\"></textarea>\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <mat-form-field class=\\\"toast-top-full-width\\\">\\r\\n                  <textarea readonly=\\\"readonly\\\" matInput placeholder=\\\"Examination reports\\\" value=\\\"{{reports}}\\\"></textarea>\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n            </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      < class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"addMedicamentForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <mat-label for=\\\"id\\\">ID</mat-label>\\r\\n              <input type=\\\"text\\\" id=\\\"id\\\" formControlName=\\\"id\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addMedicamentForm.get('id').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && addMedicamentForm.get('id').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addMedicamentForm.get('id').errors['required']\\\">Email is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"description\\\">Description</label>\\r\\n              <input type=\\\"text\\\" id=\\\"description\\\" formControlName=\\\"description\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addMedicamentForm.get('description').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addMedicamentForm.get('description').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" addMedicamentForm.get('description').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"title\\\">Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"title\\\" formControlName=\\\"title\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addMedicamentForm.get('title').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && addMedicamentForm.get('title').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addMedicamentForm.get('title').errors['required']\\\">Password is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"strenght\\\">Strenght</label>\\r\\n              <input type=\\\"text\\\" id=\\\"strenght\\\" formControlName=\\\"strenght\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && addMedicamentForm.get('strenght').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && addMedicamentForm.get('strenght').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"addMedicamentForm.get('strenght').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n          </form>\\r\\n      </mat-card>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table\\r\\n       [dataSource]=\\\"dataSource\\\" multiTemplateDataRows\\r\\n       class=\\\"mat-elevation-z8\\\">\\r\\n  <ng-container matColumnDef=\\\"{{column}}\\\" *ngFor=\\\"let column of displayedColumns\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> {{column}} </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element[column]}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let element; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n<mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n\"","export default \"<p>Welcome</p>\\r\\n\\r\\n\\r\\n<mat-form-field>\\r\\n  <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\r\\n  <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n  <mat-datepicker #picker></mat-datepicker>\\r\\n</mat-form-field>\\r\\n\\r\\n\"","export default \"<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table\\r\\n       [dataSource]=\\\"dataSource\\\" multiTemplateDataRows\\r\\n       class=\\\"mat-elevation-z8\\\">\\r\\n  <ng-container matColumnDef=\\\"{{column}}\\\" *ngFor=\\\"let column of displayedColumns\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> {{column}} </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element[column]}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\\r\\n  <ng-container matColumnDef=\\\"expandedDetail\\\">\\r\\n    <td mat-cell *matCellDef=\\\"let clinic\\\" [attr.colspan]=\\\"displayedColumns.length\\\">\\r\\n      <div class=\\\"example-element-detail\\\"\\r\\n           [@detailExpand]=\\\"clinic == expandedElement ? 'expanded' : 'collapsed'\\\">\\r\\n      </div>\\r\\n\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let element; columns: displayedColumns;\\\"\\r\\n      class=\\\"example-element-row\\\"\\r\\n      [class.example-expanded-row]=\\\"expandedElement === element\\\"\\r\\n      (click)=\\\"expandedElement = expandedElement === element ? null : element\\\">\\r\\n  </tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: ['expandedDetail']\\\" class=\\\"example-detail-row\\\"></tr>\\r\\n</table>\\r\\n<mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"nurseProfileForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <mat-label for=\\\"email\\\">Email</mat-label>\\r\\n              <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseProfileForm.get('email').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && nurseProfileForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseProfileForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"nurseProfileForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseProfileForm.get('password').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && nurseProfileForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseProfileForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                <div *ngIf=\\\"nurseProfileForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                  long</div>\\r\\n                <div *ngIf=\\\"nurseProfileForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                  1 uppercase letter\\r\\n                  and 1 number</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">First Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseProfileForm.get('name').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseProfileForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" nurseProfileForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Last Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseProfileForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseProfileForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseProfileForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"workHoursFrom\\\">WorkHoursFrom</label>\\r\\n              <input type=\\\"workHoursFrom\\\" id=\\\"workHoursFrom\\\" formControlName=\\\"workHoursFrom\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted &&  nurseProfileForm.get('workHoursFrom').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseProfileForm.get('workHoursFrom').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseProfileForm.get('workHoursFrom').errors['required']\\\">Health Insurance ID is required\\r\\n                </div>\\r\\n\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"workHoursTo\\\">WorkHoursTo</label>\\r\\n                <input type=\\\"text\\\" id=\\\"workHoursTo\\\" formControlName=\\\"workHoursTo\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && nurseProfileForm.get('workHoursTo').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && nurseProfileForm.get('workHoursTo').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"nurseProfileForm.get('workHoursTo').errors['required']\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"phone\\\">PhoneNumber</label>\\r\\n                <input type=\\\"phone\\\" id=\\\"phone\\\" formControlName=\\\"phone\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && nurseProfileForm.get('phone').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && nurseProfileForm.get('phone').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"nurseProfileForm.get('phone').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"nurseProfileForm.get('phone').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n\\r\\n\\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n            </div>\\r\\n          </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Vacation request</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"vacationRequestForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"email\\\">EMAIL</label>\\r\\n              <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('email').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && vacationRequestForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('name').errors }\\\">\\r\\n\\r\\n                <div *ngIf=\\\"submitted && vacationRequestForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"vacationRequestForm.get('name').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"vacationRequestForm.get('name').errors['name']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Surname</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && vacationRequestForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('surname').errors['surname']\\\">Address is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"startingDate\\\">StartingDate</label>\\r\\n              <input type=\\\"text\\\" id=\\\"startingDate\\\" formControlName=\\\"startingDate\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('startingDate').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && vacationRequestForm.get('startingDate').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('startingDate').errors['required']\\\">Country is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"finishDate\\\">FinishDate</label>\\r\\n              <input type=\\\"text\\\" id=\\\"finishDate\\\" formControlName=\\\"finishDate\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('finishDate').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && vacationRequestForm.get('finishDate').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"vacationRequestForm.get('finishDate').errors['required']\\\">Phone Number is required</div>\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            <button mat-raised-button style=\\\"position: center\\\" color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n          </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<h2 mat-dialog-title>Making an appointment</h2>\\r\\n<mat-dialog-content [formGroup]=\\\"MakeGroup\\\">\\r\\n  <div>\\r\\n  <mat-form-field>\\r\\n    <mat-select required=\\\"required\\\" id=\\\"terminTime\\\" formControlName = \\\"terminTime\\\" placeholder=\\\"Select date and time\\\">\\r\\n      <mat-option *ngFor=\\\"let termin of termins\\\" value=\\\"{{termin}}\\\">{{termin}}</mat-option>\\r\\n    </mat-select>\\r\\n  </mat-form-field>\\r\\n  </div>\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n  <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\r\\n  <button class=\\\"mat-raised-button mat-primary\\\"(click)=\\\"save()\\\">Save</button>\\r\\n</mat-dialog-actions>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"patientProfileForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <mat-label for=\\\"email\\\">Email</mat-label>\\r\\n              <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && patientProfileForm.get('email').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && patientProfileForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"patientProfileForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"patientProfileForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && patientProfileForm.get('password').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && patientProfileForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"patientProfileForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                <div *ngIf=\\\"patientProfileForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                  long</div>\\r\\n                <div *ngIf=\\\"patientProfileForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                  1 uppercase letter\\r\\n                  and 1 number</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">First Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && patientProfileForm.get('name').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && patientProfileForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" patientProfileForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Last Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && patientProfileForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && patientProfileForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"patientProfileForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"address\\\">Address</label>\\r\\n              <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && patientProfileForm.get('address').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && patientProfileForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"patientProfileForm.get('address').errors['required']\\\">Address is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"city\\\">City</label>\\r\\n              <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && patientProfileForm.get('city').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && patientProfileForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"patientProfileForm.get('city').errors['required']\\\">City is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"country\\\">Country</label>\\r\\n              <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && patientProfileForm.get('country').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && patientProfileForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"patientProfileForm.get('country').errors['required']\\\">Country is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"number\\\">Phone Number</label>\\r\\n              <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && patientProfileForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && patientProfileForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"patientProfileForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                <div *ngIf=\\\"patientProfileForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\r\\n              <input type=\\\"text\\\" readonly=\\\"readonly\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted &&  patientProfileForm.get('insuranceID').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && patientProfileForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"patientProfileForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\r\\n                </div>\\r\\n                <div\\r\\n                  *ngIf=\\\"patientProfileForm.get('insuranceID').errors['minlength'] ||patientProfileForm.get('insuranceID').errors['maxlength']\\\">\\r\\n                  Health\\r\\n                  Insurance ID must contain exactly 13 characters</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n\\r\\n          </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<table mat-table\\n       [dataSource]=\\\"ExaminationDataSource\\\" class=\\\"mat-elevation-z8\\\" matSort>\\n\\n  <ng-container matColumnDef=\\\"StartDate\\\">\\n    <th mat-header-cell *matHeaderCellDef> Start date </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.interval.startTime}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"EndDate\\\">\\n    <th mat-header-cell *matHeaderCellDef> End date </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.interval.endTime}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"DoctorName\\\">\\n    <th mat-header-cell *matHeaderCellDef> Doctor name </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\n      <div *ngFor=\\\"let doctor of element.doctors\\\">\\n        {{doctor.name}}\\n      </div>\\n    </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"DoctorSurname\\\">\\n    <th mat-header-cell *matHeaderCellDef> Doctor surname </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\n      <div *ngFor=\\\"let doctor of element.doctors\\\">\\n        {{doctor.surname}}\\n      </div>\\n    </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"Type\\\">\\n    <th mat-header-cell *matHeaderCellDef> Type </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.examinationType.label}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"Price\\\">\\n    <th mat-header-cell *matHeaderCellDef> Price </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.examinationType.price}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"Discount\\\">\\n    <th mat-header-cell *matHeaderCellDef> Discount </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.discount}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"Make\\\">\\n    <th mat-header-cell *matHeaderCellDef> Make an appointment  </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"make(element)\\\">Schedule it</button>\\n    </td>\\n  </ng-container>\\n\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\\n<mat-dialog-actions>\\n  <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\n</mat-dialog-actions>\\n\"","export default \"<mat-dialog-content [formGroup]=\\\"RateFormGroup\\\">\\n  <div>\\n    <mat-form-field class=\\\"example-full-width\\\">\\n      <input required=\\\"required\\\" id=\\\"doctorRating\\\" formControlName=\\\"doctorRating\\\" matInput placeholder=\\\"Rate a doctor\\\">\\n    </mat-form-field>\\n  </div>\\n  <div>\\n    <mat-form-field class=\\\"example-full-width\\\">\\n      <input required=\\\"required\\\" id=\\\"clinicRating\\\" formControlName=\\\"clinicRating\\\" matInput placeholder=\\\"Rate a clinic\\\">\\n    </mat-form-field>\\n  </div>\\n</mat-dialog-content>\\n<mat-dialog-actions>\\n  <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\n  <button class=\\\"mat-raised-button mat-primary\\\"(click)=\\\"save()\\\">Save</button>\\n</mat-dialog-actions>\\n\"","export default \"<table mat-table [dataSource]=\\\"RequestsDataSource\\\" class=\\\"mat-elevation-z8\\\">\\r\\n\\r\\n  <ng-container matColumnDef=\\\"email\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Email </th>\\r\\n    <td mat-cell *matCellDef=\\\"let patient\\\"> {{patient.email}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"approving\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Approving </th>\\r\\n    <td mat-cell *matCellDef=\\\"let patient\\\">\\r\\n      <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\" (click)=\\\"onAccept(patient)\\\">Accept</button>\\r\\n      <button mat-raised-button color=\\\"warn\\\" class=\\\"pull-right\\\">Decline</button>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\n        <mat-card>\\n          <h3>Patient Registration</h3>\\n          <hr>\\n          <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"email\\\">Email</label>\\n              <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('email').errors }\\\">\\n\\n              <div *ngIf=\\\"submitted && registerForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"registerForm.get('email').errors['required']\\\">Email is required</div>\\n                <div *ngIf=\\\"registerForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"password\\\">Password</label>\\n              <input type=\\\"password\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('password').errors }\\\">\\n              <div *ngIf=\\\"submitted && registerForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"registerForm.get('password').errors['required']\\\">Password is required</div>\\n                <div *ngIf=\\\"registerForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\n                  long</div>\\n                <div *ngIf=\\\"registerForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\n                  1 uppercase letter\\n                  and 1 number</div>\\n              </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"password\\\">Repeat password</label>\\n              <input type=\\\"password\\\" id=\\\"repeatPassword\\\" formControlName=\\\"repeatPassword\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('repeatPassword').errors }\\\">\\n              <div *ngIf=\\\"submitted && registerForm.get('repeatPassword').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"registerForm.get('repeatPassword').errors['required']\\\">Repeat password is required</div>\\n                <div *ngIf=\\\"registerForm.get('repeatPassword').errors['minlength']\\\">Repeat password  must be at least 8 characters\\n                  long</div>\\n                <div *ngIf=\\\"registerForm.get('repeatPassword').errors['pattern']\\\">Repeat password  must contain at least 1 lowercase,\\n                  1 uppercase letter\\n                  and 1 number and Must be same like password</div>\\n              </div>\\n            </div>\\n\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"name\\\">First Name</label>\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('name').errors }\\\" />\\n              <div *ngIf=\\\"submitted && registerForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\" registerForm.get('name').errors['required']\\\">First Name is required</div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"surname\\\">Last Name</label>\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('surname').errors }\\\" />\\n              <div *ngIf=\\\"submitted && registerForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"registerForm.get('surname').errors['required']\\\">Last Name is required</div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"address\\\">Address</label>\\n              <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('address').errors }\\\" />\\n              <div *ngIf=\\\"submitted && registerForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"registerForm.get('address').errors['required']\\\">Address is required</div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"city\\\">City</label>\\n              <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('city').errors }\\\" />\\n              <div *ngIf=\\\"submitted && registerForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"registerForm.get('city').errors['required']\\\">City is required</div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"country\\\">Country</label>\\n              <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('country').errors }\\\" />\\n              <div *ngIf=\\\"submitted && registerForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"registerForm.get('country').errors['required']\\\">Country is required</div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"number\\\">Phone Number</label>\\n              <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('number').errors }\\\" />\\n              <div *ngIf=\\\"submitted && registerForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"registerForm.get('number').errors['required']\\\">Phone Number is required</div>\\n                <div *ngIf=\\\"registerForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\n                  digits\\n                </div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\n              <input type=\\\"text\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\" class=\\\"form-control\\\"\\n                     [ngClass]=\\\"{ 'is-invalid': submitted &&  registerForm.get('insuranceID').errors }\\\" />\\n              <div *ngIf=\\\"submitted && registerForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"registerForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\n                </div>\\n                <div\\n                  *ngIf=\\\"registerForm.get('insuranceID').errors['minlength'] ||registerForm.get('insuranceID').errors['maxlength']\\\">\\n                  Health\\n                  Insurance ID must contain exactly 13 characters</div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <a routerLink=\\\"/patient/login\\\">Already have an account? Login here.</a>\\n            </div>\\n\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Register</button>\\n\\n          </form>\\n        </mat-card>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"<table mat-table [dataSource]=\\\"RequestsDataSource\\\" class=\\\"mat-elevation-z8\\\">\\r\\n\\r\\n  <ng-container matColumnDef=\\\"email\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> email </th>\\r\\n    <td mat-cell *matCellDef=\\\"let zahtev\\\"> {{zahtev.email}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"startingDate\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> startingDate </th>\\r\\n    <td mat-cell *matCellDef=\\\"let zahtev\\\"> {{zahtev.startingDate}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"finishDate\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> finishDate </th>\\r\\n    <td mat-cell *matCellDef=\\\"let zahtev\\\"> {{zahtev.finishDate}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"approving\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Approving </th>\\r\\n    <td mat-cell *matCellDef=\\\"let zahtev\\\">\\r\\n      <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\" (click)=\\\"onAccept(zahtev)\\\">Accept</button>\\r\\n      <button mat-raised-button color=\\\"warn\\\" class=\\\"pull-right\\\">Decline</button>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { RegistrationComponent } from './components/registration/registration.component';\r\nimport {HomePagePatientComponent} from './components/home-page-patient/home-page-patient.component';\r\nimport {ClinicsListComponent} from './components/clinics-list-patient/clinics-list.component';\r\nimport {PatientProfileComponent} from './components/patient-profile/patient-profile.component';\r\nimport {HomePageDoctorComponent} from './components/home-page-doctor/home-page-doctor.component';\r\nimport {DoctorProfileComponent} from './components/doctor-profile/doctor-profile.component';\r\nimport {HomePageNurseComponent} from './components/home-page-nurse/home-page-nurse.component';\r\nimport {NurseProfileComponent} from './components/nurse-profile/nurse-profile.component';\r\nimport {HomePageAdminClinicComponent} from './components/home-page-admin-clinic/home-page-admin-clinic.component';\r\nimport {AdminClinicProfileComponent} from './components/admin-clinic-profile/admin-clinic-profile.component';\r\nimport {HomePageClinicalCentreAdministratorComponent} from './components/home-page-clinical-centre-administrator/home-page-clinical-centre-administrator.component';\r\nimport {HomeComponent} from './components/home/home.component';\r\nimport {AppComponent} from './app.component';\r\nimport {AddClinicComponent} from './components/add-clinic/add-clinic.component';\r\nimport {RegisterRequestsComponent} from './components/register-requests/register-requests.component';\r\nimport {MedicalHistoryPatientComponent} from './components/medical-history-patient/medical-history-patient.component';\r\nimport {MedicalRecordPatientComponent} from './components/medical-record-patient/medical-record-patient.component';\r\nimport {AddClinicAdministratorComponent} from './components/add-clinic-administrator/add-clinic-administrator.component';\r\nimport {NurseDatePickerComponent} from './components/nurse-date-picker/nurse-date-picker.component';\r\nimport {NurseListPatientComponent} from './components/nurse-list-patient/nurse-list-patient.component';\r\nimport {NurseVacationRequestComponent} from './components/nurse-vacation-request/nurse-vacation-request.component';\r\nimport {VacationRequestRegisterComponent} from './components/vacation-request-register/vacation-request-register.component';\r\nimport {DoctorVacationRequestComponent} from './components/doctor-vacation-request/doctor-vacation-request.component';\r\nimport {ActivatedAccountPatientComponent} from './components/activated-account-patient/activated-account-patient.component';\r\nimport {DoctorMedicalRecordComponent} from './components/doctor-medical-record/doctor-medical-record.component';\r\nimport {DiagnoseComponent} from './components/diagnose/diagnose.component';\r\nimport {MedicamentsComponent} from './components/medicaments/medicaments.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: HomeComponent,\r\n  },\r\n  {\r\n    path: 'patient/register',\r\n    component: RegistrationComponent,\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent,\r\n  },\r\n  {\r\n    path: 'patient/home',\r\n    component: HomePagePatientComponent,\r\n  },\r\n  {\r\n    path: 'patient/medicalHistory',\r\n    component: MedicalHistoryPatientComponent,\r\n  },\r\n  {\r\n    path: 'patient/clinics',\r\n    component: ClinicsListComponent,\r\n  },\r\n  {\r\n    path: 'patient/profile',\r\n    component: PatientProfileComponent,\r\n  },\r\n  {\r\n    path: 'patient/medicalRecord',\r\n    component: MedicalRecordPatientComponent,\r\n  },\r\n  {\r\n    path: 'patient/activatedAccount/:id',\r\n    component: ActivatedAccountPatientComponent,\r\n  },\r\n  {\r\n    path: 'doctor/home',\r\n    component: HomePageDoctorComponent,\r\n  },\r\n  {\r\n    path: 'doctor/profile',\r\n    component: DoctorProfileComponent,\r\n  },\r\n  {\r\n    path: 'nurse/home',\r\n    component: HomePageNurseComponent,\r\n  },\r\n  {\r\n    path: 'nurse/profile',\r\n    component: NurseProfileComponent,\r\n  },\r\n  {\r\n    path: 'admin_clinic/home',\r\n    component: HomePageAdminClinicComponent,\r\n  },\r\n  {\r\n    path: 'admin_clinic/profile',\r\n    component: AdminClinicProfileComponent,\r\n  },\r\n  {\r\n    path: 'clinical-centre-admin/home',\r\n    component: HomePageClinicalCentreAdministratorComponent,\r\n  },\r\n  {\r\n    path: 'clinical-centre-admin/addClinic',\r\n    component: AddClinicComponent,\r\n  },\r\n  {\r\n    path: 'clinical-centre-admin/requests',\r\n    component: RegisterRequestsComponent,\r\n  },\r\n\r\n  {\r\n    path: 'clinical-centre-admin/addAdmins',\r\n    component: AddClinicAdministratorComponent,\r\n  },\r\n\r\n  {\r\n    path: 'nurse/WorkCalendar',\r\n    component: NurseDatePickerComponent,\r\n  },\r\n\r\n  {\r\n    path: 'nurse/ListOfPatient',\r\n    component: NurseListPatientComponent,\r\n  },\r\n  {\r\n    path: 'nurse/VacationRequest',\r\n    component: NurseVacationRequestComponent,\r\n  },\r\n  {\r\n    path: 'clinical-centre-admin/VacationRequests',\r\n    component: VacationRequestRegisterComponent,\r\n  },\r\n  {\r\n    path: 'doctor/VacationRequest',\r\n    component: DoctorVacationRequestComponent,\r\n  },\r\n  {\r\n    path: 'doctor/MedicalRecord',\r\n    component: DoctorMedicalRecordComponent,\r\n  },\r\n  {\r\n    path: 'clinical-centre-admin/addDiagnose',\r\n    component: DiagnoseComponent,\r\n  },\r\n  {\r\n    path: 'clinical-centre-admin/addMedicament',\r\n    component: MedicamentsComponent,\r\n  },\r\n\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","export default \".sidenav-container {\\r\\n  height: 100%;\\r\\n}\\r\\n\\r\\n.sidenav {\\r\\n  width: 200px;\\r\\n}\\r\\n\\r\\n.mat-nav-list{\\r\\n  background-color: khaki;\\r\\n}\\r\\n\\r\\n.mat-toolbar.mat-primary {\\r\\n  position: -webkit-sticky;\\r\\n  position: sticky;\\r\\n  top: 0;\\r\\n  z-index: 1;\\r\\n}\\r\\n\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBQ0E7RUFDRSx3QkFBZ0I7RUFBaEIsZ0JBQWdCO0VBQ2hCLE1BQU07RUFDTixVQUFVO0FBQ1oiLCJmaWxlIjoic3JjL2FwcC9hcHAuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zaWRlbmF2LWNvbnRhaW5lciB7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG59XHJcblxyXG4uc2lkZW5hdiB7XHJcbiAgd2lkdGg6IDIwMHB4O1xyXG59XHJcblxyXG4ubWF0LW5hdi1saXN0e1xyXG4gIGJhY2tncm91bmQtY29sb3I6IGtoYWtpO1xyXG59XHJcbi5tYXQtdG9vbGJhci5tYXQtcHJpbWFyeSB7XHJcbiAgcG9zaXRpb246IHN0aWNreTtcclxuICB0b3A6IDA7XHJcbiAgei1pbmRleDogMTtcclxufVxyXG5cclxuIl19 */\"","\r\nimport { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\nimport {UserServiceService} from './services/user-service.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches),\r\n      shareReplay()\r\n    );\r\n\r\n  constructor(private breakpointObserver: BreakpointObserver, private userService: UserServiceService) { }\r\n\r\n\r\n  public isLoggedIn() {\r\n    return this.userService.isLoggedIn();\r\n  }\r\n\r\n  public isNone() {\r\n    return this.userService.isNone();\r\n  }\r\n\r\n  public isClinicalCentreAdmin() {\r\n    return this.userService.isClinicalCentreAdmin();\r\n  }\r\n\r\n  public isClinicAdmin() {\r\n    return this.userService.isClinicalAdmin();\r\n  }\r\n\r\n  public isPatient() {\r\n    return this.userService.isPatient();\r\n  }\r\n\r\n  public isDoctor() {\r\n    return this.userService.isDoctor();\r\n  }\r\n\r\n  public isNurse() {\r\n    return this.userService.isNurse();\r\n  }\r\n\r\n  public onLogout() {\r\n    this.userService.logOut();\r\n  }\r\n\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { MatToolbarModule, MatButtonModule, MatSidenavModule, MatIconModule, MatListModule, MatCardModule, MatFormFieldModule, MatInputModule } from '@angular/material';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport {DemoMaterialModule} from './material-module';\r\nimport { RegistrationComponent } from './components/registration/registration.component';\r\nimport { HomePagePatientComponent } from './components/home-page-patient/home-page-patient.component';\r\nimport { ClinicsListComponent } from './components/clinics-list-patient/clinics-list.component';\r\nimport { PatientProfileComponent } from './components/patient-profile/patient-profile.component';\r\nimport {HomePageDoctorComponent} from './components/home-page-doctor/home-page-doctor.component';\r\nimport { DoctorProfileComponent } from './components/doctor-profile/doctor-profile.component';\r\nimport { NurseProfileComponent } from './components/nurse-profile/nurse-profile.component';\r\nimport { HomePageNurseComponent } from './components/home-page-nurse/home-page-nurse.component';\r\nimport { HomePageAdminClinicComponent } from './components/home-page-admin-clinic/home-page-admin-clinic.component';\r\nimport { AdminClinicProfileComponent } from './components/admin-clinic-profile/admin-clinic-profile.component';\r\nimport { HomePageClinicalCentreAdministratorComponent } from './components/home-page-clinical-centre-administrator/home-page-clinical-centre-administrator.component';\r\nimport { HomeComponent } from './components/home/home.component';\r\nimport { AddClinicComponent } from './components/add-clinic/add-clinic.component';\r\nimport { RegisterRequestsComponent } from './components/register-requests/register-requests.component';\r\nimport { MedicalHistoryPatientComponent } from './components/medical-history-patient/medical-history-patient.component';\r\nimport { MedicalRecordPatientComponent } from './components/medical-record-patient/medical-record-patient.component';\r\nimport {AddClinicAdministratorComponent} from './components/add-clinic-administrator/add-clinic-administrator.component';\r\nimport { ClinicSearchDialogComponent } from './components/clinic-search-dialog/clinic-search-dialog.component';\r\nimport { DoctorListPatientComponent } from './components/doctor-list-patient/doctor-list-patient.component';\r\nimport {NurseDatePickerComponent} from './components/nurse-date-picker/nurse-date-picker.component';\r\nimport { NurseListPatientComponent } from './components/nurse-list-patient/nurse-list-patient.component';\r\nimport { NurseVacationRequestComponent } from './components/nurse-vacation-request/nurse-vacation-request.component';\r\nimport { VacationRequestRegisterComponent } from './components/vacation-request-register/vacation-request-register.component';\r\nimport { DoctorVacationRequestComponent } from './components/doctor-vacation-request/doctor-vacation-request.component';\r\nimport { DoctorSearchDialogComponent } from './components/doctor-search-dialog/doctor-search-dialog.component';\r\nimport { DoctorMedicalRecordComponent } from './components/doctor-medical-record/doctor-medical-record.component';\r\nimport { MedicalRecordDialogComponent } from './components/medical-record-dialog/medical-record-dialog.component';\r\nimport {PredefExaminationDialogComponent} from './components/predef-examination-dialog/predef-examination-dialog.component';\r\nimport { PatientMakeExaminationComponent } from './components/patient-make-examination/patient-make-examination.component';\r\nimport { ActivatedAccountPatientComponent } from './components/activated-account-patient/activated-account-patient.component';\r\nimport { DiagnoseComponent } from './components/diagnose/diagnose.component';\r\nimport { MedicamentsComponent } from './components/medicaments/medicaments.component';\r\nimport { RateDoctorAndClinicPatientComponent } from './components/rate-doctor-and-clinic-patient/rate-doctor-and-clinic-patient.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n\r\n    LoginComponent,\r\n\r\n    RegistrationComponent,\r\n\r\n    HomePagePatientComponent,\r\n\r\n    ClinicsListComponent,\r\n\r\n    PatientProfileComponent,\r\n\r\n    HomePageDoctorComponent,\r\n\r\n    DoctorProfileComponent,\r\n\r\n    NurseProfileComponent,\r\n\r\n    HomePageNurseComponent,\r\n\r\n    HomePageAdminClinicComponent,\r\n\r\n    AdminClinicProfileComponent,\r\n\r\n    HomePageClinicalCentreAdministratorComponent,\r\n\r\n    HomeComponent,\r\n\r\n    AddClinicComponent,\r\n\r\n    RegisterRequestsComponent,\r\n\r\n    MedicalHistoryPatientComponent,\r\n\r\n    MedicalRecordPatientComponent,\r\n\r\n    AddClinicAdministratorComponent,\r\n\r\n    ClinicSearchDialogComponent,\r\n\r\n    DoctorListPatientComponent,\r\n\r\n    NurseDatePickerComponent,\r\n\r\n    NurseListPatientComponent,\r\n\r\n    NurseVacationRequestComponent,\r\n\r\n    VacationRequestRegisterComponent,\r\n\r\n    DoctorVacationRequestComponent,\r\n\r\n    DoctorSearchDialogComponent,\r\n\r\n    PredefExaminationDialogComponent,\r\n\r\n    PatientMakeExaminationComponent,\r\n\r\n    ActivatedAccountPatientComponent,\r\n\r\n    DoctorMedicalRecordComponent,\r\n\r\n    MedicalRecordDialogComponent,\r\n\r\n    DiagnoseComponent,\r\n\r\n    MedicamentsComponent,\r\n\r\n    RateDoctorAndClinicPatientComponent,\r\n\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    ToastrModule.forRoot({\r\n      timeOut: 2000,\r\n      positionClass: 'toast-top-right',\r\n      preventDuplicates: true,\r\n    }),\r\n    LayoutModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    MatNativeDateModule,\r\n    DemoMaterialModule,\r\n\r\n\r\n  ],\r\n  entryComponents: [\r\n    ClinicSearchDialogComponent,\r\n    DoctorListPatientComponent,\r\n    DoctorSearchDialogComponent,\r\n    PredefExaminationDialogComponent,\r\n    PatientMakeExaminationComponent,\r\n    MedicalRecordDialogComponent,\r\n    RateDoctorAndClinicPatientComponent,\r\n\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYWN0aXZhdGVkLWFjY291bnQtcGF0aWVudC9hY3RpdmF0ZWQtYWNjb3VudC1wYXRpZW50LmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport {PatientService} from '../../services/patient.service';\nimport {ActivatedRoute, Router} from '@angular/router';\n\n@Component({\n  selector: 'app-activated-account-patient',\n  templateUrl: './activated-account-patient.component.html',\n  styleUrls: ['./activated-account-patient.component.css']\n})\nexport class ActivatedAccountPatientComponent implements OnInit {\n\n  success = false;\n\n  constructor(private patientService: PatientService,\n              private router: Router,\n              private activatedRoute: ActivatedRoute) { }\n\n  ngOnInit() {\n   const id = this.activatedRoute.snapshot.params.id;\n   this.activatePatient(id);\n   console.log('Id je: ' + id);\n  }\n  activatePatient(id: number) {\n    this.patientService.activatePatient(id).subscribe(data => {\n        this.success = true;\n      },\n      error => {\n        alert('Your account is already activated');\n        console.log(error);\n      });\n  }\n\n\n}\n","export default \"div {\\r\\n  width: 100%;\\r\\n\\r\\n}\\r\\n\\r\\ntable {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n  width: 75%;\\r\\n}\\r\\n\\r\\nmat-paginator {\\r\\n  width: 75%;\\r\\n  margin-left:300px;\\r\\n}\\r\\n\\r\\ntr.example-detail-row {\\r\\n  height: 0;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):hover {\\r\\n  background: #777;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):active {\\r\\n  background: #efefef;\\r\\n}\\r\\n\\r\\n.example-element-row td {\\r\\n  border-bottom-width: 0;\\r\\n}\\r\\n\\r\\n.example-element-detail {\\r\\n  overflow: hidden;\\r\\n  display: -webkit-box;\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.example-element-diagram {\\r\\n  min-width: 80px;\\r\\n  border: 2px solid black;\\r\\n  padding: 8px;\\r\\n  font-weight: lighter;\\r\\n  margin: 8px 0;\\r\\n  height: 104px;\\r\\n}\\r\\n\\r\\n.example-element-name {\\r\\n  font-weight: bold;\\r\\n  font-size: 40px;\\r\\n  line-height: normal;\\r\\n}\\r\\n\\r\\n.example-element-description {\\r\\n  padding: 16px;\\r\\n}\\r\\n\\r\\n.example-element-description-attribution {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9hZGQtY2xpbmljLWFkbWluaXN0cmF0b3IvYWRkLWNsaW5pYy1hZG1pbmlzdHJhdG9yLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFXOztBQUViOztBQUVBO0VBQ0UsVUFBVTtFQUNWLGVBQWU7RUFDZixpQkFBaUI7O0FBRW5COztBQUNBO0VBQ0UsZUFBZTtFQUNmLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsVUFBVTtBQUNaOztBQUNBO0VBQ0UsVUFBVTtFQUNWLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLFNBQVM7QUFDWDs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixvQkFBYTtFQUFiLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGVBQWU7RUFDZix1QkFBdUI7RUFDdkIsWUFBWTtFQUNaLG9CQUFvQjtFQUNwQixhQUFhO0VBQ2IsYUFBYTtBQUNmOztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLGVBQWU7RUFDZixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxZQUFZO0FBQ2QiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL2FkZC1jbGluaWMtYWRtaW5pc3RyYXRvci9hZGQtY2xpbmljLWFkbWluaXN0cmF0b3IuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImRpdiB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcblxyXG59XHJcblxyXG50YWJsZSB7XHJcbiAgd2lkdGg6IDc1JTtcclxuICBtYXJnaW4tdG9wOjUwcHg7XHJcbiAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcblxyXG59XHJcbi5tYXQtZm9ybS1maWVsZCB7XHJcbiAgZm9udC1zaXplOiAxNHB4O1xyXG4gIG1hcmdpbi10b3A6NTBweDtcclxuICBtYXJnaW4tbGVmdDozMDBweDtcclxuICB3aWR0aDogNzUlO1xyXG59XHJcbm1hdC1wYWdpbmF0b3Ige1xyXG4gIHdpZHRoOiA3NSU7XHJcbiAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcbn1cclxuXHJcbnRyLmV4YW1wbGUtZGV0YWlsLXJvdyB7XHJcbiAgaGVpZ2h0OiAwO1xyXG59XHJcblxyXG50ci5leGFtcGxlLWVsZW1lbnQtcm93Om5vdCguZXhhbXBsZS1leHBhbmRlZC1yb3cpOmhvdmVyIHtcclxuICBiYWNrZ3JvdW5kOiAjNzc3O1xyXG59XHJcblxyXG50ci5leGFtcGxlLWVsZW1lbnQtcm93Om5vdCguZXhhbXBsZS1leHBhbmRlZC1yb3cpOmFjdGl2ZSB7XHJcbiAgYmFja2dyb3VuZDogI2VmZWZlZjtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1yb3cgdGQge1xyXG4gIGJvcmRlci1ib3R0b20td2lkdGg6IDA7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtZGV0YWlsIHtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtZGlhZ3JhbSB7XHJcbiAgbWluLXdpZHRoOiA4MHB4O1xyXG4gIGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrO1xyXG4gIHBhZGRpbmc6IDhweDtcclxuICBmb250LXdlaWdodDogbGlnaHRlcjtcclxuICBtYXJnaW46IDhweCAwO1xyXG4gIGhlaWdodDogMTA0cHg7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtbmFtZSB7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgZm9udC1zaXplOiA0MHB4O1xyXG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtZGVzY3JpcHRpb24ge1xyXG4gIHBhZGRpbmc6IDE2cHg7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtZGVzY3JpcHRpb24tYXR0cmlidXRpb24ge1xyXG4gIG9wYWNpdHk6IDAuNTtcclxufVxyXG5cclxuIl19 */\"","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {AdminClinic} from '../../model/adminClinic';\r\nimport {AdminClinicService} from '../../services/admin-clinic.service';\r\nimport {Router} from '@angular/router';\r\nimport {MatPaginator, MatTableDataSource} from '@angular/material';\r\nimport {Doctor} from '../../model/doctor';\r\nimport {Clinic} from '../../model/clinic';\r\n\r\n@Component({\r\n  selector: 'app-add-clinic-administrator',\r\n  templateUrl: './add-clinic-administrator.component.html',\r\n  styleUrls: ['./add-clinic-administrator.component.css']\r\n})\r\nexport class AddClinicAdministratorComponent implements OnInit {\r\n\r\n  addClinicAdministratorForm: FormGroup;\r\n  submitted = false;\r\n  adminClinic: AdminClinic;\r\n  displayedColumns: string[] = ['name', 'surname', 'number' ];\r\n  dataSource = new MatTableDataSource<AdminClinic>();\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  expandedElement: AdminClinic;\r\n  admins: Array<AdminClinic> = new Array<AdminClinic>();\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private adminClinicService: AdminClinicService,\r\n    private router: Router,\r\n  ) {\r\n    this.admins = this.adminClinicService.getAllClinicAdmins();\r\n    this.all();\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.addClinicAdministratorForm = this.formBuilder.group({\r\n\r\n      email: new FormControl('', [Validators.required]),\r\n      password: new FormControl('', [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl( '', [Validators.required]),\r\n      surname: new FormControl('', [Validators.required]),\r\n      number: new FormControl('', [Validators.required, Validators.minLength(9)]),\r\n    });\r\n    this.all();\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n\r\n  get f() {\r\n    return this.addClinicAdministratorForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.addClinicAdministratorForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.adminClinic = new AdminClinic(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n    );\r\n\r\n    this.adminClinic = new AdminClinic(this.f.email.value, this.f.password.value, this.f.name.value,\r\n      this.f.surname.value, this.f.number.value);\r\n\r\n    this.createClinicAdministrator();\r\n  }\r\n\r\n  private createClinicAdministrator() {\r\n    this.adminClinicService.newAdminClinic(this.adminClinic).subscribe(\r\n      data => {\r\n        this.adminClinicService.addAdminClinic(this.adminClinic);\r\n        this.router.navigate(['/clinical-centre-admin/home']);\r\n      },\r\n      error => {\r\n        alert('Error registration patient');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  all() {\r\n    this.dataSource = new MatTableDataSource<AdminClinic>(this.adminClinicService.getAllClinicAdmins());\r\n  }\r\n\r\n\r\n}\r\n","export default \"div {\\r\\n  width: 100%;\\r\\n\\r\\n}\\r\\n\\r\\ntable {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n  width: 75%;\\r\\n}\\r\\n\\r\\nmat-paginator {\\r\\n  width: 75%;\\r\\n  margin-left:300px;\\r\\n}\\r\\n\\r\\ntr.example-detail-row {\\r\\n  height: 0;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):hover {\\r\\n  background: #777;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):active {\\r\\n  background: #efefef;\\r\\n}\\r\\n\\r\\n.example-element-row td {\\r\\n  border-bottom-width: 0;\\r\\n}\\r\\n\\r\\n.example-element-detail {\\r\\n  overflow: hidden;\\r\\n  display: -webkit-box;\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.example-element-diagram {\\r\\n  min-width: 80px;\\r\\n  border: 2px solid black;\\r\\n  padding: 8px;\\r\\n  font-weight: lighter;\\r\\n  margin: 8px 0;\\r\\n  height: 104px;\\r\\n}\\r\\n\\r\\n.example-element-name {\\r\\n  font-weight: bold;\\r\\n  font-size: 40px;\\r\\n  line-height: normal;\\r\\n}\\r\\n\\r\\n.example-element-description {\\r\\n  padding: 16px;\\r\\n}\\r\\n\\r\\n.example-element-description-attribution {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9hZGQtY2xpbmljL2FkZC1jbGluaWMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVc7O0FBRWI7O0FBRUE7RUFDRSxVQUFVO0VBQ1YsZUFBZTtFQUNmLGlCQUFpQjs7QUFFbkI7O0FBQ0E7RUFDRSxlQUFlO0VBQ2YsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixVQUFVO0FBQ1o7O0FBQ0E7RUFDRSxVQUFVO0VBQ1YsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsU0FBUztBQUNYOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLG9CQUFhO0VBQWIsYUFBYTtBQUNmOztBQUVBO0VBQ0UsZUFBZTtFQUNmLHVCQUF1QjtFQUN2QixZQUFZO0VBQ1osb0JBQW9CO0VBQ3BCLGFBQWE7RUFDYixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsZUFBZTtFQUNmLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLFlBQVk7QUFDZCIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYWRkLWNsaW5pYy9hZGQtY2xpbmljLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJkaXYge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG5cclxufVxyXG5cclxudGFibGUge1xyXG4gIHdpZHRoOiA3NSU7XHJcbiAgbWFyZ2luLXRvcDo1MHB4O1xyXG4gIG1hcmdpbi1sZWZ0OjMwMHB4O1xyXG5cclxufVxyXG4ubWF0LWZvcm0tZmllbGQge1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxuICBtYXJnaW4tdG9wOjUwcHg7XHJcbiAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcbiAgd2lkdGg6IDc1JTtcclxufVxyXG5tYXQtcGFnaW5hdG9yIHtcclxuICB3aWR0aDogNzUlO1xyXG4gIG1hcmdpbi1sZWZ0OjMwMHB4O1xyXG59XHJcblxyXG50ci5leGFtcGxlLWRldGFpbC1yb3cge1xyXG4gIGhlaWdodDogMDtcclxufVxyXG5cclxudHIuZXhhbXBsZS1lbGVtZW50LXJvdzpub3QoLmV4YW1wbGUtZXhwYW5kZWQtcm93KTpob3ZlciB7XHJcbiAgYmFja2dyb3VuZDogIzc3NztcclxufVxyXG5cclxudHIuZXhhbXBsZS1lbGVtZW50LXJvdzpub3QoLmV4YW1wbGUtZXhwYW5kZWQtcm93KTphY3RpdmUge1xyXG4gIGJhY2tncm91bmQ6ICNlZmVmZWY7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtcm93IHRkIHtcclxuICBib3JkZXItYm90dG9tLXdpZHRoOiAwO1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LWRldGFpbCB7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LWRpYWdyYW0ge1xyXG4gIG1pbi13aWR0aDogODBweDtcclxuICBib3JkZXI6IDJweCBzb2xpZCBibGFjaztcclxuICBwYWRkaW5nOiA4cHg7XHJcbiAgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XHJcbiAgbWFyZ2luOiA4cHggMDtcclxuICBoZWlnaHQ6IDEwNHB4O1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LW5hbWUge1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIGZvbnQtc2l6ZTogNDBweDtcclxuICBsaW5lLWhlaWdodDogbm9ybWFsO1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LWRlc2NyaXB0aW9uIHtcclxuICBwYWRkaW5nOiAxNnB4O1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LWRlc2NyaXB0aW9uLWF0dHJpYnV0aW9uIHtcclxuICBvcGFjaXR5OiAwLjU7XHJcbn1cclxuXHJcbiJdfQ== */\"","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {MatDialog, MatPaginator, MatTableDataSource} from '@angular/material';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\nimport {Clinic} from '../../model/clinic';\r\nimport {ClinicService} from '../../services/clinic.service';\r\nimport {AdminClinic} from '../../model/adminClinic';\r\n\r\n@Component({\r\n  selector: 'app-add-clinic',\r\n  templateUrl: './add-clinic.component.html',\r\n  styleUrls: ['./add-clinic.component.css']\r\n})\r\nexport class AddClinicComponent implements OnInit {\r\n\r\n  addClinicForm: FormGroup;\r\n  submitted = false;\r\n  clinic: Clinic;\r\n  displayedColumns: string[] = ['name', 'address', 'description' ];\r\n  dataSource = new MatTableDataSource<Clinic>();\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  expandedElement: Clinic;\r\n  clinics: Array<Clinic> = new Array<Clinic>();\r\n\r\n  constructor(public dialog: MatDialog,\r\n              private formBuilder: FormBuilder,\r\n              private router: Router,\r\n              private clinicService: ClinicService) {\r\n\r\n    this.clinics = this.clinicService.getAllClinics();\r\n    this.all();\r\n  }\r\n\r\n  address: string;\r\n  name: string;\r\n  description: string;\r\n  grade: string;\r\n\r\n  ngOnInit() {\r\n    this.addClinicForm = this.formBuilder.group({\r\n\r\n      name: new FormControl('', [Validators.required]),\r\n      address: new FormControl('', [Validators.required]),\r\n      description: new FormControl('', [Validators.required]),\r\n      grade: new FormControl('', [Validators.required]),\r\n    });\r\n\r\n    this.all();\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n\r\n\r\n  get f() {\r\n    return this.addClinicForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.addClinicForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.clinic = new Clinic(\r\n      this.f.name.value,\r\n      this.f.address.value,\r\n      this.f.description.value,\r\n      this.f.grade.value,\r\n    );\r\n\r\n    this.clinic = new Clinic(this.f.name.value, this.f.address.value, this.f.description.value, this.f.grade.value);\r\n\r\n    this.createClinic();\r\n  }\r\n\r\n  private createClinic() {\r\n    this.clinicService.newClinic(this.clinic).subscribe(\r\n      data => {\r\n        this.clinicService.addClinic(this.clinic);\r\n        this.router.navigate(['/clinical-centre-admin/home']);\r\n      },\r\n      error => {\r\n        alert('Error registration patient');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  all() {\r\n    this.dataSource = new MatTableDataSource<Clinic>(this.clinicService.getAllClinics());\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYWRtaW4tY2xpbmljLXByb2ZpbGUvYWRtaW4tY2xpbmljLXByb2ZpbGUuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {AdminClinic} from \"../../model/adminClinic\";\r\nimport {User} from \"../../model/user\";\r\nimport {Router} from \"@angular/router\";\r\nimport {UserServiceService} from \"../../services/user-service.service\";\r\nimport {Role} from \"../../model/role\";\r\nimport {AdminClinicService} from \"../../services/admin-clinic.service\";\r\n\r\n@Component({\r\n  selector: 'app-admin-clinic-profile',\r\n  templateUrl: './admin-clinic-profile.component.html',\r\n  styleUrls: ['./admin-clinic-profile.component.css']\r\n})\r\nexport class AdminClinicProfileComponent implements OnInit {\r\n\r\n  adminClinicProfileForm: FormGroup;\r\n  submitted = false;\r\n  adminClinic: AdminClinic;\r\n  selectedAdminClinic: AdminClinic;\r\n  user: User;\r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router, private adminClinicService: AdminClinicService,\r\n              private  userService: UserServiceService) {\r\n    this.user = JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedAdminClinic = adminClinicService.getAdminClinic(this.user.email);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.adminClinicProfileForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedAdminClinic.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedAdminClinic.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedAdminClinic.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedAdminClinic.surname, [Validators.required]),\r\n      number: new FormControl(this.selectedAdminClinic.number, [Validators.required, Validators.minLength(9)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.adminClinicProfileForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.adminClinicProfileForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.adminClinic = new AdminClinic(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value\r\n    );\r\n    this.user = new User(this.f.email.value, this.f.password.value, Role.CLINIC_ADMINISTRATOR);\r\n\r\n    this.editAdminClinic();\r\n  }\r\n\r\n  private editAdminClinic(){\r\n    this.adminClinicService.editAdminClinic(this.adminClinic).subscribe(\r\n      data => {\r\n        this.userService.setUser(this.user);\r\n        this.adminClinicService.setAdminClinic(this.adminClinic);\r\n        this.router.navigate(['/admin_clinic/home']);\r\n      },\r\n      error => {\r\n        alert('Error edit doctor');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2xpbmljLXNlYXJjaC1kaWFsb2cvY2xpbmljLXNlYXJjaC1kaWFsb2cuY29tcG9uZW50LmNzcyJ9 */\"","import {Component, Inject, Input, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {ExaminationType} from '../../model/examinationType';\r\nimport {MAT_DIALOG_DATA, MatDialogRef, MatTableDataSource} from '@angular/material';\r\nimport {ExaminationsTypeService} from '../../services/examination-type.service';\r\nimport {Clinic} from '../../model/clinic';\r\nimport {ClinicService} from '../../services/clinic.service';\r\n\r\n\r\nexport class Result {\r\n  date: string;\r\n  clinics: Array<Clinic> = new Array<Clinic>();\r\n}\r\n\r\n@Component({\r\n  selector: 'app-clinic-search-dialog',\r\n  templateUrl: './clinic-search-dialog.component.html',\r\n  styleUrls: ['./clinic-search-dialog.component.css']\r\n})\r\nexport class ClinicSearchDialogComponent implements OnInit {\r\n\r\n  SearchClinicsGroup: FormGroup;\r\n  clinics: Array<Clinic> = new Array<Clinic>();\r\n  types: Array<ExaminationType> = new Array<ExaminationType>();\r\n  result: Result = new Result();\r\n  myFilter = (d: Date): boolean => {\r\n    const day = d.getDay();\r\n    // Subota i nedelja se ne radi.\r\n    return day !== 0 && day !== 6;\r\n  }\r\n\r\n  constructor(private clinicService: ClinicService,\r\n              private formBuilder: FormBuilder,\r\n              private examinationTypeService: ExaminationsTypeService,\r\n              private dialogRef: MatDialogRef<ClinicSearchDialogComponent>,\r\n              @Inject(MAT_DIALOG_DATA) data) {\r\n    this.types = examinationTypeService.getAllTypes();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.SearchClinicsGroup = this.formBuilder.group({\r\n      date: new FormControl(''),\r\n      type: new FormControl(''),\r\n    });\r\n  }\r\n  get f() {\r\n    return this.SearchClinicsGroup.controls;\r\n  }\r\n\r\n  save() {\r\n    if (this.SearchClinicsGroup.invalid) {\r\n      return;\r\n    }\r\n\r\n    console.log(this.f.type.value);\r\n    this.clinicService.setType(this.f.type.value);\r\n    const a = new Date(this.f.date.value);\r\n\r\n    const date = a.toLocaleDateString();\r\n    console.log(date);\r\n\r\n    this.clinics = this.clinicService.getClinicsWithType(this.f.type.value, date);\r\n    this.result.date = date;\r\n    this.result.clinics = this.clinics;\r\n    this.dialogRef.close(this.result);\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n\r\n}\r\n","export default \"div {\\r\\n  width: 100%;\\r\\n\\r\\n}\\r\\n\\r\\ntable {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n  width: 75%;\\r\\n}\\r\\n\\r\\nmat-paginator {\\r\\n  width: 75%;\\r\\n  margin-left:300px;\\r\\n}\\r\\n\\r\\ntr.example-detail-row {\\r\\n  height: 0;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):hover {\\r\\n  background: #777;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):active {\\r\\n  background: #efefef;\\r\\n}\\r\\n\\r\\n.example-element-row td {\\r\\n  border-bottom-width: 0;\\r\\n}\\r\\n\\r\\n.example-element-detail {\\r\\n  overflow: hidden;\\r\\n  display: -webkit-box;\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.example-element-diagram {\\r\\n  min-width: 80px;\\r\\n  border: 2px solid black;\\r\\n  padding: 8px;\\r\\n  font-weight: lighter;\\r\\n  margin: 8px 0;\\r\\n  height: 104px;\\r\\n}\\r\\n\\r\\n.example-element-name {\\r\\n  font-weight: bold;\\r\\n  font-size: 40px;\\r\\n  line-height: normal;\\r\\n}\\r\\n\\r\\n.example-element-description {\\r\\n  padding: 16px;\\r\\n}\\r\\n\\r\\n.example-element-description-attribution {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n\\r\\n.mat-raised-button {\\r\\n  margin-left:300px;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9jbGluaWNzLWxpc3QtcGF0aWVudC9jbGluaWNzLWxpc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVc7O0FBRWI7O0FBRUE7RUFDRSxVQUFVO0VBQ1YsZUFBZTtFQUNmLGlCQUFpQjs7QUFFbkI7O0FBQ0E7RUFDRSxlQUFlO0VBQ2YsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixVQUFVO0FBQ1o7O0FBQ0E7RUFDRSxVQUFVO0VBQ1YsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsU0FBUztBQUNYOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLG9CQUFhO0VBQWIsYUFBYTtBQUNmOztBQUVBO0VBQ0UsZUFBZTtFQUNmLHVCQUF1QjtFQUN2QixZQUFZO0VBQ1osb0JBQW9CO0VBQ3BCLGFBQWE7RUFDYixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsZUFBZTtFQUNmLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLFlBQVk7QUFDZDs7QUFDQTtFQUNFLGlCQUFpQjtBQUNuQiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2xpbmljcy1saXN0LXBhdGllbnQvY2xpbmljcy1saXN0LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJkaXYge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG5cclxufVxyXG5cclxudGFibGUge1xyXG4gIHdpZHRoOiA3NSU7XHJcbiAgbWFyZ2luLXRvcDo1MHB4O1xyXG4gIG1hcmdpbi1sZWZ0OjMwMHB4O1xyXG5cclxufVxyXG4ubWF0LWZvcm0tZmllbGQge1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxuICBtYXJnaW4tdG9wOjUwcHg7XHJcbiAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcbiAgd2lkdGg6IDc1JTtcclxufVxyXG5tYXQtcGFnaW5hdG9yIHtcclxuICB3aWR0aDogNzUlO1xyXG4gIG1hcmdpbi1sZWZ0OjMwMHB4O1xyXG59XHJcblxyXG50ci5leGFtcGxlLWRldGFpbC1yb3cge1xyXG4gIGhlaWdodDogMDtcclxufVxyXG5cclxudHIuZXhhbXBsZS1lbGVtZW50LXJvdzpub3QoLmV4YW1wbGUtZXhwYW5kZWQtcm93KTpob3ZlciB7XHJcbiAgYmFja2dyb3VuZDogIzc3NztcclxufVxyXG5cclxudHIuZXhhbXBsZS1lbGVtZW50LXJvdzpub3QoLmV4YW1wbGUtZXhwYW5kZWQtcm93KTphY3RpdmUge1xyXG4gIGJhY2tncm91bmQ6ICNlZmVmZWY7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtcm93IHRkIHtcclxuICBib3JkZXItYm90dG9tLXdpZHRoOiAwO1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LWRldGFpbCB7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LWRpYWdyYW0ge1xyXG4gIG1pbi13aWR0aDogODBweDtcclxuICBib3JkZXI6IDJweCBzb2xpZCBibGFjaztcclxuICBwYWRkaW5nOiA4cHg7XHJcbiAgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XHJcbiAgbWFyZ2luOiA4cHggMDtcclxuICBoZWlnaHQ6IDEwNHB4O1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LW5hbWUge1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIGZvbnQtc2l6ZTogNDBweDtcclxuICBsaW5lLWhlaWdodDogbm9ybWFsO1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LWRlc2NyaXB0aW9uIHtcclxuICBwYWRkaW5nOiAxNnB4O1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LWRlc2NyaXB0aW9uLWF0dHJpYnV0aW9uIHtcclxuICBvcGFjaXR5OiAwLjU7XHJcbn1cclxuLm1hdC1yYWlzZWQtYnV0dG9uIHtcclxuICBtYXJnaW4tbGVmdDozMDBweDtcclxufVxyXG4iXX0= */\"","import {Component, Input, OnInit, ViewChild} from '@angular/core';\r\nimport {MatDialog, MatPaginator, MatTableDataSource, MatSort} from '@angular/material';\r\nimport {Clinic} from '../../model/clinic';\r\nimport {ClinicService} from '../../services/clinic.service';\r\nimport {Doctor} from '../../model/doctor';\r\nimport {DoctorService} from '../../services/doctor.service';\r\nimport {ClinicSearchDialogComponent} from '../clinic-search-dialog/clinic-search-dialog.component';\r\nimport {DoctorListPatientComponent} from '../doctor-list-patient/doctor-list-patient.component';\r\nimport {PredefExaminationDialogComponent} from '../predef-examination-dialog/predef-examination-dialog.component';\r\n\r\n\r\n@Component({\r\n  selector: 'app-clinics-list',\r\n  templateUrl: './clinics-list.component.html',\r\n  styleUrls: ['./clinics-list.component.css'],\r\n})\r\nexport class ClinicsListComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['Name', 'Address', 'ClinicRating', 'Doctors'];\r\n  clinic: Clinic;\r\n  doctor: Doctor;\r\n  condition: boolean;\r\n  tmp: string;\r\n  str: string;\r\n  tmp1: Array<string> = new Array<string>();\r\n  arr: Array<string[]> = new Array<string[]>();\r\n  dataSource = new MatTableDataSource<Clinic>();\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\r\n  clinics: Array<Clinic> = new Array<Clinic>();\r\n\r\n  constructor(\r\n    private clinicService: ClinicService,\r\n    private doctorService: DoctorService,\r\n    public dialog: MatDialog,\r\n    public doctorsDialog: MatDialog,\r\n    public predefExaminaitonDialog: MatDialog,\r\n  ) {\r\n    // this.doctors = this.doctorService.getAllDoctors();\r\n    this.clinics = this.clinicService.getAllClinics();\r\n    this.all();\r\n    this.condition = true;\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n\r\n  }\r\n\r\n  all() {\r\n      this.dataSource = new MatTableDataSource(this.clinicService.getAllClinics());\r\n      this.dataSource.paginator = this.paginator;\r\n      this.dataSource.sort = this.sort;\r\n\r\n    // this.doctordataSource = new MatTableDataSource<Doctor>(this.doctorService.getAllDoctors());\r\n  }\r\n\r\n  openDialog() {\r\n    const dialog = this.dialog.open(ClinicSearchDialogComponent);\r\n    dialog.afterClosed().subscribe(data => {\r\n       console.log('DATA ISPOD ZA KLINIKE')\r\n       console.log(data);\r\n       if (data !== undefined) {\r\n         this.clinics = data.clinics;\r\n         console.log(this.clinics);\r\n         this.dataSource = new MatTableDataSource(this.clinics);\r\n         this.condition = false;\r\n         this.tmp = data.date;\r\n         this.doctorService.setDate(data.date);\r\n       }\r\n      }\r\n    );\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  doctorList(element: Clinic) {\r\n    this.doctorService.setDoctorss(element.doctors);\r\n    this.clinicService.setClinicForExamination(element);\r\n    this.arr = new Array<string[]>();\r\n    for (const d of element.doctors) {\r\n      this.tmp1 = new Array<string>();\r\n      // this.tmp1 = this.doctorService.getDoctorsTermins(this.tmp, d.email);\r\n    }\r\n    // this.doctorService.setExaminationsInterval(this.arr);\r\n    // const dialog = this.doctorsDialog.open(DoctorListPatientComponent);\r\n    // setTimeout(() => {const dialog = this.doctorsDialog.open(DoctorListPatientComponent);  dialog.updateSize('1000px', '600'); }, 800);\r\n    const dialog = this.doctorsDialog.open(DoctorListPatientComponent);\r\n    dialog.updateSize('1000px', '600');\r\n  }\r\n  predefDialog() {\r\n    const dialog = this.predefExaminaitonDialog.open(PredefExaminationDialogComponent);\r\n    dialog.updateSize('1000px', '600');\r\n  }\r\n\r\n\r\n}\r\n","export default \"div {\\r\\n  width: 100%;\\r\\n\\r\\n}\\r\\n\\r\\ntable {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n  width: 75%;\\r\\n}\\r\\n\\r\\nmat-paginator {\\r\\n  width: 75%;\\r\\n  margin-left:300px;\\r\\n}\\r\\n\\r\\ntr.example-detail-row {\\r\\n  height: 0;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):hover {\\r\\n  background: #777;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):active {\\r\\n  background: #efefef;\\r\\n}\\r\\n\\r\\n.example-element-row td {\\r\\n  border-bottom-width: 0;\\r\\n}\\r\\n\\r\\n.example-element-detail {\\r\\n  overflow: hidden;\\r\\n  display: -webkit-box;\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.example-element-diagram {\\r\\n  min-width: 80px;\\r\\n  border: 2px solid black;\\r\\n  padding: 8px;\\r\\n  font-weight: lighter;\\r\\n  margin: 8px 0;\\r\\n  height: 104px;\\r\\n}\\r\\n\\r\\n.example-element-name {\\r\\n  font-weight: bold;\\r\\n  font-size: 40px;\\r\\n  line-height: normal;\\r\\n}\\r\\n\\r\\n.example-element-description {\\r\\n  padding: 16px;\\r\\n}\\r\\n\\r\\n.example-element-description-attribution {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9kaWFnbm9zZS9kaWFnbm9zZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBVzs7QUFFYjs7QUFFQTtFQUNFLFVBQVU7RUFDVixlQUFlO0VBQ2YsaUJBQWlCOztBQUVuQjs7QUFDQTtFQUNFLGVBQWU7RUFDZixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLFVBQVU7QUFDWjs7QUFDQTtFQUNFLFVBQVU7RUFDVixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxTQUFTO0FBQ1g7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsb0JBQWE7RUFBYixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsdUJBQXVCO0VBQ3ZCLFlBQVk7RUFDWixvQkFBb0I7RUFDcEIsYUFBYTtFQUNiLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsWUFBWTtBQUNkIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9kaWFnbm9zZS9kaWFnbm9zZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiZGl2IHtcclxuICB3aWR0aDogMTAwJTtcclxuXHJcbn1cclxuXHJcbnRhYmxlIHtcclxuICB3aWR0aDogNzUlO1xyXG4gIG1hcmdpbi10b3A6NTBweDtcclxuICBtYXJnaW4tbGVmdDozMDBweDtcclxuXHJcbn1cclxuLm1hdC1mb3JtLWZpZWxkIHtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbiAgbWFyZ2luLXRvcDo1MHB4O1xyXG4gIG1hcmdpbi1sZWZ0OjMwMHB4O1xyXG4gIHdpZHRoOiA3NSU7XHJcbn1cclxubWF0LXBhZ2luYXRvciB7XHJcbiAgd2lkdGg6IDc1JTtcclxuICBtYXJnaW4tbGVmdDozMDBweDtcclxufVxyXG5cclxudHIuZXhhbXBsZS1kZXRhaWwtcm93IHtcclxuICBoZWlnaHQ6IDA7XHJcbn1cclxuXHJcbnRyLmV4YW1wbGUtZWxlbWVudC1yb3c6bm90KC5leGFtcGxlLWV4cGFuZGVkLXJvdyk6aG92ZXIge1xyXG4gIGJhY2tncm91bmQ6ICM3Nzc7XHJcbn1cclxuXHJcbnRyLmV4YW1wbGUtZWxlbWVudC1yb3c6bm90KC5leGFtcGxlLWV4cGFuZGVkLXJvdyk6YWN0aXZlIHtcclxuICBiYWNrZ3JvdW5kOiAjZWZlZmVmO1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LXJvdyB0ZCB7XHJcbiAgYm9yZGVyLWJvdHRvbS13aWR0aDogMDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1kZXRhaWwge1xyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgZGlzcGxheTogZmxleDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1kaWFncmFtIHtcclxuICBtaW4td2lkdGg6IDgwcHg7XHJcbiAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XHJcbiAgcGFkZGluZzogOHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiBsaWdodGVyO1xyXG4gIG1hcmdpbjogOHB4IDA7XHJcbiAgaGVpZ2h0OiAxMDRweDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1uYW1lIHtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBmb250LXNpemU6IDQwcHg7XHJcbiAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1kZXNjcmlwdGlvbiB7XHJcbiAgcGFkZGluZzogMTZweDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1kZXNjcmlwdGlvbi1hdHRyaWJ1dGlvbiB7XHJcbiAgb3BhY2l0eTogMC41O1xyXG59XHJcblxyXG4iXX0= */\"","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Diagnose} from '../../model/Diagnose';\r\nimport {MatPaginator, MatTableDataSource} from '@angular/material';\r\nimport {Router} from '@angular/router';\r\nimport {DiagnoseService} from '../../services/diagnose.service';\r\n\r\n@Component({\r\n  selector: 'app-diagnose',\r\n  templateUrl: './diagnose.component.html',\r\n  styleUrls: ['./diagnose.component.css']\r\n})\r\nexport class DiagnoseComponent implements OnInit {\r\n\r\n  addDiagnoseForm: FormGroup;\r\n  submitted = false;\r\n  diagnose: Diagnose;\r\n  displayedColumns = ['id', 'title', 'description'];\r\n  expandedElement: Diagnose;\r\n  dataSource = new MatTableDataSource<Diagnose>();\r\n  diagnoses: Array<Diagnose>;\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n\r\n  constructor( private formbuilder: FormBuilder,\r\n               private diagnoseService: DiagnoseService,\r\n               private router: Router,\r\n               ) {\r\n    this.diagnoses = this.diagnoseService.getAllDiagnoses();\r\n    this.all();\r\n  }\r\n\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n\r\n  ngOnInit() {\r\n    this.addDiagnoseForm = this.formbuilder.group({\r\n      id: new FormControl('', [Validators.required]),\r\n      title: new FormControl('', [Validators.required]),\r\n      description: new FormControl('', [Validators.required]),\r\n    });\r\n    this.all();\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n\r\n  get f() {\r\n    return this.addDiagnoseForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.addDiagnoseForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.diagnose = new Diagnose(\r\n      this.f.id.value,\r\n      this.f.title.value,\r\n      this.f.description.value,\r\n    );\r\n\r\n    this.diagnose = new Diagnose(this.f.id.value, this.f.title.value, this.f.description.value);\r\n\r\n    this.createDiagnose();\r\n  }\r\n\r\n  private createDiagnose() {\r\n    this.diagnoseService.newDiagnose(this.diagnose).subscribe(\r\n      data => {\r\n        this.diagnoseService.addDiagnose(this.diagnose);\r\n        this.router.navigate(['/clinical-centre-admin/home']);\r\n      },\r\n      error => {\r\n        alert('Error adding diagnose');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  all() {\r\n    this.dataSource = new MatTableDataSource(this.diagnoseService.getAllDiagnoses());\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n","export default \" table {\\r\\n   width: 100%;\\r\\n }\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9kb2N0b3ItbGlzdC1wYXRpZW50L2RvY3Rvci1saXN0LXBhdGllbnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQ0FBQztHQUNFLFdBQVc7Q0FDYiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZG9jdG9yLWxpc3QtcGF0aWVudC9kb2N0b3ItbGlzdC1wYXRpZW50LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIgdGFibGUge1xyXG4gICB3aWR0aDogMTAwJTtcclxuIH1cclxuIl19 */\"","import {ChangeDetectorRef, Component, Input, OnInit} from '@angular/core';\r\nimport {MatDialog, MatDialogRef, MatTableDataSource} from '@angular/material';\r\nimport {Doctor} from '../../model/doctor';\r\nimport {DoctorService} from '../../services/doctor.service';\r\nimport {DoctorSearchDialogComponent} from '../doctor-search-dialog/doctor-search-dialog.component';\r\nimport {PatientMakeExaminationComponent} from '../patient-make-examination/patient-make-examination.component';\r\n\r\nexport class DataTable {\r\n  termin: string;\r\n  doctor: Doctor;\r\n  constructor() {}\r\n}\r\n\r\n@Component({\r\n  selector: 'app-doctor-list-patient',\r\n  templateUrl: './doctor-list-patient.component.html',\r\n  styleUrls: ['./doctor-list-patient.component.css']\r\n})\r\nexport class DoctorListPatientComponent implements OnInit {\r\n  displayedColumns: string[] = ['Name', 'Surname', 'DoctorRating', 'Price', 'Make'];\r\n  doctorDataSource: MatTableDataSource<Doctor>;\r\n  doctors: Array<Doctor>;\r\n  date: string;\r\n  termins: Array<string[]> = new Array<string[]>();\r\n  @Input() doctorSearchDialog: DoctorSearchDialogComponent;\r\n  constructor(private doctorService: DoctorService,\r\n              public searchDialog: MatDialog,\r\n              public dialog: MatDialog,\r\n              private dialogRef: MatDialogRef<DoctorSearchDialogComponent>) {\r\n    this.doctors = doctorService.getDoctorss();\r\n    this.termins = doctorService.getExaminationsInterval();\r\n    this.doctorDataSource = new MatTableDataSource(this.doctors);\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.doctorDataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.doctorDataSource.paginator) {\r\n      this.doctorDataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  searchDoctors() {\r\n    const dialog = this.searchDialog.open(DoctorSearchDialogComponent);\r\n    dialog.afterClosed().subscribe(data => {\r\n        if (data !== undefined) {\r\n          this.doctors = data;\r\n          this.doctorDataSource = new MatTableDataSource(data);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  make(element) {\r\n    this.doctorService.setDoctorForMake(element);\r\n    setTimeout(() => {const dialog = this.searchDialog.open(PatientMakeExaminationComponent); dialog.afterClosed().subscribe(data => {\r\n      this.dialogRef.close();\r\n    }); }, 200);\r\n\r\n    // const dialog = this.searchDialog.open(PatientMakeExaminationComponent);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","export default \"table {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9kb2N0b3ItbWVkaWNhbC1yZWNvcmQvZG9jdG9yLW1lZGljYWwtcmVjb3JkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxVQUFVO0VBQ1YsZUFBZTtFQUNmLGlCQUFpQjs7QUFFbkIiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL2RvY3Rvci1tZWRpY2FsLXJlY29yZC9kb2N0b3ItbWVkaWNhbC1yZWNvcmQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbInRhYmxlIHtcclxuICB3aWR0aDogNzUlO1xyXG4gIG1hcmdpbi10b3A6NTBweDtcclxuICBtYXJnaW4tbGVmdDozMDBweDtcclxuXHJcbn1cclxuIl19 */\"","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {MatDialog, MatPaginator, MatTableDataSource} from '@angular/material';\r\nimport {MedicalRecord} from '../../model/medicalRecord';\r\nimport {MedicalRecordService} from '../../services/medical-record.service';\r\nimport {Patient} from '../../model/patient';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\nimport {FormGroup} from '@angular/forms';\r\nimport {Clinic} from '../../model/clinic';\r\nimport {MedicalRecordPatientComponent} from '../medical-record-patient/medical-record-patient.component';\r\nimport {MedicalRecordDialogComponent} from '../medical-record-dialog/medical-record-dialog.component';\r\nimport {ExaminationService} from '../../services/examination.service';\r\nimport {Examination} from '../../model/examination';\r\n\r\n@Component({\r\n  selector: 'app-doctor-medical-record',\r\n  templateUrl: './doctor-medical-record.component.html',\r\n  styleUrls: ['./doctor-medical-record.component.css']\r\n})\r\nexport class DoctorMedicalRecordComponent implements OnInit {\r\n\r\n  patient: Patient;\r\n  pat: Array<Examination>;\r\n  displayedColumns: string[] = ['startTime', 'endTime', 'patientName', 'patientSurname', 'Edit'];\r\n  DataSource: MatTableDataSource<Examination>;\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  expandedElement: Patient;\r\n  condition: boolean;\r\n  rec: Array<MedicalRecord> = new Array<MedicalRecord>();\r\n\r\n  constructor(public dialog: MatDialog,\r\n              public medReqDialog: MatDialog,\r\n              private medicalRecServis: MedicalRecordService,\r\n              private patientService: PatientService,\r\n              private medicalService: MedicalRecordService,\r\n              private examinationService: ExaminationService,\r\n              private userService: UserServiceService) {\r\n\r\n    this.rec = this.medicalRecServis.getAllMedicalRecords();\r\n    const user = JSON.parse(userService.isLoggedIn());\r\n\r\n    this.pat = this.examinationService.getExaminationsForDoctor(user.email);\r\n    this.condition = false;\r\n    console.log('Ispod1');\r\n    console.log(this.pat);\r\n    this.all();\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n    this.DataSource.paginator = this.paginator;\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.DataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  all() {\r\n    this.DataSource = new MatTableDataSource(this.pat);\r\n  }\r\n\r\n  edit(element: Examination) {\r\n\r\n    const medicalRecordForDialog = this.medicalRecServis.getMedicalRecordForPatient(element.patient.email);\r\n    this.medicalService.setMedicalRecordForDialog(medicalRecordForDialog);\r\n    this.patientService.setPatient1(element.patient);\r\n    this.condition = this.medicalService.getLocalDateAndTime(element.interval.startTime, element.interval.endTime);\r\n\r\n  //  setTimeout(() => {\r\n    if (this.condition === true) {\r\n        console.log('u kondition sam');\r\n        console.log(this.condition);\r\n        setTimeout(() => {const dialog = this.medReqDialog.open(MedicalRecordDialogComponent); }, 1000);\r\n      }\r\n //   }, 200);\r\n\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZG9jdG9yLXByb2ZpbGUvZG9jdG9yLXByb2ZpbGUuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Doctor} from '../../model/doctor';\r\nimport {User} from '../../model/user';\r\nimport {Router} from '@angular/router';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\nimport {DoctorService} from '../../services/doctor.service';\r\nimport {Role} from '../../model/role';\r\n\r\n@Component({\r\n  selector: 'app-doctor-profile',\r\n  templateUrl: './doctor-profile.component.html',\r\n  styleUrls: ['./doctor-profile.component.css']\r\n})\r\nexport class DoctorProfileComponent implements OnInit {\r\n\r\n  doctorProfileForm: FormGroup;\r\n  submitted = false;\r\n  doctor: Doctor;\r\n  selectedDoctor: Doctor;\r\n  user: User;\r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router, private doctorService: DoctorService,\r\n              private  userService: UserServiceService) {\r\n    this.user = JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedDoctor = doctorService.getDoctor(this.user.email);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.doctorProfileForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedDoctor.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedDoctor.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedDoctor.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedDoctor.surname, [Validators.required]),\r\n      number: new FormControl(this.selectedDoctor.phone, [Validators.required, Validators.minLength(9)]),\r\n      workHoursFrom: new FormControl(this.selectedDoctor.workHoursFrom, [Validators.required, Validators.minLength(2),\r\n        Validators.maxLength(2)]),\r\n      workHoursTo: new FormControl(this.selectedDoctor.workHoursTo, [Validators.required, Validators.minLength(2),\r\n        Validators.maxLength(2)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.doctorProfileForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.doctorProfileForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.doctor = new Doctor(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.workHoursFrom.value,\r\n      this.f.workHoursTo.value,\r\n    );\r\n    this.user = new User(this.f.email.value, this.f.password.value, Role.DOCTOR);\r\n\r\n    this.editDoctor();\r\n  }\r\n\r\n  private editDoctor() {\r\n    this.doctorService.editDoctor(this.doctor).subscribe(\r\n      data => {\r\n        this.userService.setUser(this.user);\r\n        this.doctorService.setDoctor(this.doctor);\r\n        this.router.navigate(['/doctor/home']);\r\n        console.log('uspesno');\r\n      },\r\n      error => {\r\n        alert('Error edit doctor');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZG9jdG9yLXNlYXJjaC1kaWFsb2cvZG9jdG9yLXNlYXJjaC1kaWFsb2cuY29tcG9uZW50LmNzcyJ9 */\"","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';\r\nimport {Doctor} from '../../model/doctor';\r\nimport {DoctorService} from '../../services/doctor.service';\r\n\r\n@Component({\r\n  selector: 'app-doctor-search-dialog',\r\n  templateUrl: './doctor-search-dialog.component.html',\r\n  styleUrls: ['./doctor-search-dialog.component.css']\r\n})\r\nexport class DoctorSearchDialogComponent implements OnInit {\r\n\r\n  SearchDoctorGroup: FormGroup;\r\n  doctors: Array<Doctor> = new Array<Doctor>();\r\n  constructor(private formBuilder: FormBuilder,\r\n              private doctorService: DoctorService,\r\n              private dialogRef: MatDialogRef<DoctorSearchDialogComponent>,\r\n              @Inject(MAT_DIALOG_DATA) data) { }\r\n\r\n  ngOnInit() {\r\n    this.SearchDoctorGroup = this.formBuilder.group({\r\n      name: new FormControl(''),\r\n      surname: new FormControl(''),\r\n      rating: new FormControl('', [Validators.required, Validators.minLength(1), Validators.maxLength(1),\r\n        Validators.pattern('[0-5]*')]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.SearchDoctorGroup.controls;\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  save() {\r\n    if (this.SearchDoctorGroup.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.doctors = this.doctorService.getDoctrosWithSearch(this.f.name.value, this.f.surname.value, this.f.rating.value);\r\n    console.log(this.doctors);\r\n    this.dialogRef.close(this.doctors);\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZG9jdG9yLXZhY2F0aW9uLXJlcXVlc3QvZG9jdG9yLXZhY2F0aW9uLXJlcXVlc3QuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Zahtev} from '../../model/Zahtev';\r\nimport {MatDialog} from '@angular/material';\r\nimport {Router} from '@angular/router';\r\nimport {VacationService} from '../../services/vacation.service';\r\nimport {ZahtevStatus} from '../../model/ZahtevStatus';\r\n\r\n@Component({\r\n  selector: 'app-doctor-vacation-request',\r\n  templateUrl: './doctor-vacation-request.component.html',\r\n  styleUrls: ['./doctor-vacation-request.component.css']\r\n})\r\nexport class DoctorVacationRequestComponent implements OnInit {\r\n\r\n  vacationRequestForm: FormGroup;\r\n  submitted = false;\r\n  zahtev: Zahtev;\r\n\r\n  constructor(public dialog: MatDialog,\r\n              private formBuilder: FormBuilder,\r\n              private router: Router,\r\n              private vacationService: VacationService,\r\n  ) {}\r\n\r\n\r\n  ngOnInit() {\r\n    this.vacationRequestForm = this.formBuilder.group({\r\n      email: new FormControl('', [Validators.required]),\r\n      name: new FormControl('', [Validators.required]),\r\n      surname: new FormControl('', [Validators.required]),\r\n      startingDate: new FormControl('', [Validators.required]),\r\n      finishDate: new FormControl('', [Validators.required]),\r\n\r\n    });\r\n\r\n  }\r\n\r\n\r\n  get f() {\r\n    return this.vacationRequestForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.vacationRequestForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.zahtev = new Zahtev(\r\n      this.f.email.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.startingDate.value,\r\n      this.f.finishDate.value,\r\n      ZahtevStatus.AWAITING_APPROVAL\r\n    );\r\n\r\n    this.zahtev = new Zahtev(this.f.email.value, this.f.name.value, this.f.surname.value, this.f.startingDate.value, this.f.finishDate.value, ZahtevStatus.AWAITING_APPROVAL);\r\n\r\n    this.createVacation();\r\n\r\n  }\r\n\r\n  private createVacation() {\r\n    console.log('ovde sam');\r\n\r\n    this.vacationService.newVacation1(this.zahtev).subscribe(\r\n      data => {\r\n        console.log('unutra sam');\r\n\r\n        this.vacationService.addVacation1(this.zahtev);\r\n        this.router.navigate(['/doctor/home']);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        console.log('greska');\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvaG9tZS1wYWdlLWFkbWluLWNsaW5pYy9ob21lLXBhZ2UtYWRtaW4tY2xpbmljLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home-page-admin-clinic',\r\n  templateUrl: './home-page-admin-clinic.component.html',\r\n  styleUrls: ['./home-page-admin-clinic.component.css']\r\n})\r\nexport class HomePageAdminClinicComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvaG9tZS1wYWdlLWNsaW5pY2FsLWNlbnRyZS1hZG1pbmlzdHJhdG9yL2hvbWUtcGFnZS1jbGluaWNhbC1jZW50cmUtYWRtaW5pc3RyYXRvci5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home-page-clinical-centre-administrator',\r\n  templateUrl: './home-page-clinical-centre-administrator.component.html',\r\n  styleUrls: ['./home-page-clinical-centre-administrator.component.css']\r\n})\r\nexport class HomePageClinicalCentreAdministratorComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvaG9tZS1wYWdlLWRvY3Rvci9ob21lLXBhZ2UtZG9jdG9yLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home-page-doctor',\r\n  templateUrl: './home-page-doctor.component.html',\r\n  styleUrls: ['./home-page-doctor.component.css']\r\n})\r\nexport class HomePageDoctorComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvaG9tZS1wYWdlLW51cnNlL2hvbWUtcGFnZS1udXJzZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nurse-home-page',\r\n  templateUrl: './home-page-nurse.component.html',\r\n  styleUrls: ['./home-page-nurse.component.css']\r\n})\r\nexport class HomePageNurseComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvaG9tZS1wYWdlLXBhdGllbnQvaG9tZS1wYWdlLXBhdGllbnQuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport {MedicalRecordService} from '../../services/medical-record.service';\r\nimport {ExaminationService} from '../../services/examination.service';\r\nimport {User} from '../../model/user';\r\nimport {Examination} from '../../model/examination';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\n\r\n@Component({\r\n  selector: 'app-home-page-patient',\r\n  templateUrl: './home-page-patient.component.html',\r\n  styleUrls: ['./home-page-patient.component.css']\r\n})\r\nexport class HomePagePatientComponent implements OnInit {\r\n\r\n  user = this.userService.getLoggedUser();\r\n  tmp: Array<Examination>;\r\n  constructor(private examinationService: ExaminationService, private userService: UserServiceService) {\r\n    this.tmp = examinationService.getMHforP(this.user.email);\r\n    this.examinationService.setMHFP(this.tmp);\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \".image{\\r\\n  height:40em; background-size:cover; width:auto;\\r\\n  background-image:url('2.jpg');\\r\\n  background-position:50% 50%;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9ob21lL2hvbWUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVcsRUFBRSxxQkFBcUIsRUFBRSxVQUFVO0VBQzlDLDZCQUE2QjtFQUM3QiwyQkFBMkI7QUFDN0IiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL2hvbWUvaG9tZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmltYWdle1xyXG4gIGhlaWdodDo0MGVtOyBiYWNrZ3JvdW5kLXNpemU6Y292ZXI7IHdpZHRoOmF1dG87XHJcbiAgYmFja2dyb3VuZC1pbWFnZTp1cmwoJzIuanBnJyk7XHJcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjo1MCUgNTAlO1xyXG59XHJcbiJdfQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \".example-full-width {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.main-content {\\r\\n  margin: 20px 0;\\r\\n\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBVztBQUNiOztBQUVBO0VBQ0UsY0FBYzs7QUFFaEIiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXhhbXBsZS1mdWxsLXdpZHRoIHtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuLm1haW4tY29udGVudCB7XHJcbiAgbWFyZ2luOiAyMHB4IDA7XHJcblxyXG59XHJcbiJdfQ== */\"","import {Component, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {Router} from '@angular/router';\r\nimport {User} from '../../model/user';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\nimport {Role} from '../../model/role';\r\nimport {DoctorService} from '../../services/doctor.service';\r\nimport {ClinicService} from '../../services/clinic.service';\r\nimport {NurseServiceService} from '../../services/nurse-service.service';\r\nimport {AdminClinicService} from '../../services/admin-clinic.service';\r\nimport {ClinicalCentreAdministratorService} from '../../services/clinical-centre-administrator.service';\r\nimport {Patient} from '../../model/patient';\r\nimport {PatientStatus} from '../../model/patientStatus';\r\nimport {ExaminationService} from '../../services/examination.service';\r\nimport {MedicalRecordService} from '../../services/medical-record.service';\r\nimport {ExaminationsTypeService} from '../../services/examination-type.service';\r\nimport {MedicalRecord} from '../../model/medicalRecord';\r\nimport {Examination} from '../../model/examination';\r\n\r\nexport class LoginUser {\r\n  constructor(\r\n    public email: string,\r\n    public password: string\r\n  ) {}\r\n}\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  private loginForm: FormGroup;\r\n  private submitted = false;\r\n  private user: User;\r\n  private loginUser: LoginUser;\r\n  private patient: Patient;\r\n  private MRFR: MedicalRecord;\r\n  private MHFP: Array<Examination>;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserServiceService,\r\n    private doctorService: DoctorService,\r\n    private clinicalService: ClinicService,\r\n    private nurseService: NurseServiceService,\r\n    private adminClinicService: AdminClinicService,\r\n    private clinicalCentreAdministratorService: ClinicalCentreAdministratorService,\r\n    private examinationService: ExaminationService,\r\n    private medicalRecordService: MedicalRecordService,\r\n    private examinationsTypeService: ExaminationsTypeService,\r\n\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  // Convenience getter for easy access to form fields\r\n  get f() {\r\n    return this.loginForm.controls;\r\n  }\r\n\r\n  private onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.loginUser = new LoginUser(\r\n      this.f.email.value,\r\n      this.f.password.value\r\n    );\r\n\r\n    // alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(this.loginForm.value));\r\n\r\n    this.user = this.userService.getUser(this.f.email.value);\r\n    this.patient = this.patientService.getPatient(this.f.email.value);\r\n    this.attemptPatientLogin();\r\n  }\r\n\r\n  public attemptPatientLogin() {\r\n    if (this.user.role === Role.PATIENT && this.loginUser.password === this.user.password && this.patient.status === PatientStatus.ACTIVATED) {\r\n      this.patientService.loginPatient(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            alert('Successful logged in');\r\n            this.userService.setLoggedUser(this.user);\r\n            this.MRFR = this.medicalRecordService.getMRforP(this.user.email);\r\n            this.medicalRecordService.setMRFP(this.MRFR);\r\n            this.router.navigate(['/patient/home']);\r\n          } else {\r\n            alert('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.DOCTOR && this.loginUser.password === this.user.password) {\r\n      this.doctorService.loginDoctor(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            alert('Successful logged in');\r\n            this.router.navigate(['/doctor/home']);\r\n          } else {\r\n            alert('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.NURSE && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.nurseService.loginNurse(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            alert('Successful logged in');\r\n            this.router.navigate(['/nurse/home']);\r\n          } else {\r\n            alert('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.CLINIC_ADMINISTRATOR && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.adminClinicService.loginAdminClinic(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            alert('Successful logged in');\r\n            this.router.navigate(['/admin_clinic/home']);\r\n          } else {\r\n            alert('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n\r\n    } else if (this.user.role === Role.CLINICAL_CENTRE_ADMINISTRATOR && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.clinicalCentreAdministratorService.loginAdmin(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            alert('Successful logged in');\r\n            this.router.navigate(['/clinical-centre-admin/home']);\r\n          } else {\r\n            alert('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n","export default \"table {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n}\\r\\n\\r\\nth.mat-sort-header-sorted {\\r\\n  color: black;\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n  width: 75%;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9tZWRpY2FsLWhpc3RvcnktcGF0aWVudC9tZWRpY2FsLWhpc3RvcnktcGF0aWVudC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsVUFBVTtFQUNWLGVBQWU7RUFDZixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxZQUFZO0FBQ2Q7O0FBQ0E7RUFDRSxlQUFlO0VBQ2YsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixVQUFVO0FBQ1oiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL21lZGljYWwtaGlzdG9yeS1wYXRpZW50L21lZGljYWwtaGlzdG9yeS1wYXRpZW50LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0YWJsZSB7XHJcbiAgd2lkdGg6IDc1JTtcclxuICBtYXJnaW4tdG9wOjUwcHg7XHJcbiAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcbn1cclxuXHJcbnRoLm1hdC1zb3J0LWhlYWRlci1zb3J0ZWQge1xyXG4gIGNvbG9yOiBibGFjaztcclxufVxyXG4ubWF0LWZvcm0tZmllbGQge1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxuICBtYXJnaW4tdG9wOjUwcHg7XHJcbiAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcbiAgd2lkdGg6IDc1JTtcclxufVxyXG4iXX0= */\"","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {MatDialog, MatPaginator, MatSort, MatTableDataSource} from '@angular/material';\r\nimport {Examination} from '../../model/examination';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {ExaminationService} from '../../services/examination.service';\r\nimport {User} from '../../model/user';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\nimport {ExaminationStatus} from '../../model/examinationStatus';\r\nimport {RateDoctorAndClinicPatientComponent} from '../rate-doctor-and-clinic-patient/rate-doctor-and-clinic-patient.component';\r\nimport {async} from 'q';\r\n\r\n@Component({\r\n  selector: 'app-medical-history-patient',\r\n  templateUrl: './medical-history-patient.component.html',\r\n  styleUrls: ['./medical-history-patient.component.css']\r\n})\r\nexport class MedicalHistoryPatientComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['Kind', 'Clinic', 'Doctor', 'StartTime', 'EndTime', 'Rate'];\r\n  medicalDataSource = new MatTableDataSource<Examination>();\r\n  examinations: Array<Examination> = this.examinationService.getAllExaminations();\r\n  tmp: Array<Examination> = new Array<Examination>();\r\n  loggedUser: string = this.userService.isLoggedIn();\r\n  user: User;\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\r\n  tmpStr = this.loggedUser.split(',');\r\n  tmpStr1 = this.tmpStr[0].split(':');\r\n  flag: boolean;\r\n  constructor(private patientService: PatientService, private examinationService: ExaminationService,\r\n              private userService: UserServiceService,\r\n              public dialog: MatDialog) {\r\n    this.user = JSON.parse(this.loggedUser);\r\n    this.flag = false;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n  }\r\n\r\n  all() {\r\n    // Ovako ostavljeno posto ovako jedino radi tabela.\r\n    for (const c of this.examinations) {\r\n      if (c.status !== ExaminationStatus.PREDEF_AVAILABLE) {\r\n        if (c.patient.email === this.user.email) {\r\n          this.tmp.push(c);\r\n        }\r\n      }\r\n    }\r\n    this.medicalDataSource = new MatTableDataSource(this.tmp);\r\n  }\r\n\r\n  async rate(examination) {\r\n    this.examinationService.setExaminationForRating(examination);\r\n    this.flag = await this.examinationService.getFlagForRate(examination.id.toString());\r\n    console.log('FLAG ISPOD');\r\n    console.log(this.flag);\r\n    this.openDialog(this.flag);\r\n\r\n  }\r\n\r\n  openDialog(flag) {\r\n    if (flag === true) {\r\n      const d = this.dialog.open(RateDoctorAndClinicPatientComponent);\r\n    }\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbWVkaWNhbC1yZWNvcmQtZGlhbG9nL21lZGljYWwtcmVjb3JkLWRpYWxvZy5jb21wb25lbnQuY3NzIn0= */\"","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {Patient} from '../../model/patient';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {forEachComment} from 'tslint';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';\r\nimport {MedicalRecord} from '../../model/medicalRecord';\r\nimport {MedicalRecordService} from '../../services/medical-record.service';\r\nimport {Nurse} from '../../model/nurse';\r\nimport {Router} from '@angular/router';\r\nimport {ExaminationReport} from '../../model/examinationReport';\r\n\r\n@Component({\r\n  selector: 'app-medical-record-dialog',\r\n  templateUrl: './medical-record-dialog.component.html',\r\n  styleUrls: ['./medical-record-dialog.component.css']\r\n})\r\nexport class MedicalRecordDialogComponent implements OnInit {\r\n  medicalRecord: MedicalRecord;\r\n  submitted = false;\r\n  records: Array<MedicalRecord>;\r\n  record: Patient;\r\n  medicalRecordForm: FormGroup;\r\n  examinationReport: ExaminationReport;\r\n  comm = '';\r\n  constructor(private formBuilder: FormBuilder,\r\n              private patientService: PatientService,\r\n              private dialogRef: MatDialogRef<MedicalRecordDialogComponent>,\r\n              private medicalService: MedicalRecordService,\r\n              private router: Router,\r\n              @Inject(MAT_DIALOG_DATA) data) {\r\n\r\n    this.records = medicalService.getAllMedicalRecords();\r\n    this.record = patientService.getPatient1();\r\n    this.setAll();\r\n    this.medicalRecord = medicalService.getMedicalRecordForDialog();\r\n    console.log('blabla');\r\n    console.log(this.medicalRecord);\r\n\r\n    this.examinationReport = medicalService.getExaminationReportForPatient();\r\n  //  this.comm = this.examinationReport.comment;\r\n    console.log('komentar');\r\n    console.log(this.examinationReport);\r\n  }\r\n\r\n  ngOnInit() {\r\n    // this.setAll();\r\n\r\n    this.medicalRecordForm = this.formBuilder.group({\r\n      height: new FormControl(this.medicalRecord.height),\r\n      weight: new FormControl(this.medicalRecord.weight),\r\n      bloodType: new FormControl(this.medicalRecord.bloodType),\r\n      allergies: new FormControl(this.medicalRecord.allergies),\r\n      reports: new FormControl(this.examinationReport),\r\n\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.medicalRecordForm.controls;\r\n  }\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.medicalRecordForm.invalid) {\r\n      return;\r\n    }\r\n  //  this.medicalRecord.set(this.f.height.value, this.f.weight.value, this.f.bloodType.value, this.f.allergies.value)\r\n    this.medicalRecord.height = this.f.height.value;\r\n    this.medicalRecord.weight = this.f.weight.value;\r\n    this.medicalRecord.bloodType = this.f.bloodType.value;\r\n    this.medicalRecord.allergies = this.f.allergies.value;\r\n    this.medicalRecord.examinationReports = this.f.reports.value;\r\n    console.log(this.medicalRecord);\r\n\r\n    this.editMedicalRecord();\r\n    this.dialogRef.close(this.medicalRecord);\r\n    for (const c in ExaminationReport) {\r\n\r\n    }\r\n  }\r\n\r\n  private editMedicalRecord() {\r\n    this.medicalService.editMedicalRecord(this.medicalRecord).subscribe(\r\n      data => {\r\n        this.medicalService.setMedicalRecord(this.medicalRecord);\r\n        this.router.navigate(['/doctor/MedicalRecord']);\r\n      },\r\n      error => {\r\n        alert('Error edit Medical record');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  setAll() {\r\n    for (const c of this.records) {\r\n      if (c.patient.email === this.record.email) {\r\n        this.medicalRecord = c;\r\n        // Ovde da se otkomentarise kad se doda reports iz baza u klasu medicalRecord\r\n        // for (const r of this.mr.reports) {\r\n        // this.reports = r.comment + ' ';\r\n        // }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","export default \".mat-input-placeholder {\\r\\n  size: auto;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9tZWRpY2FsLXJlY29yZC1wYXRpZW50L21lZGljYWwtcmVjb3JkLXBhdGllbnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFVBQVU7QUFDWiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbWVkaWNhbC1yZWNvcmQtcGF0aWVudC9tZWRpY2FsLXJlY29yZC1wYXRpZW50LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubWF0LWlucHV0LXBsYWNlaG9sZGVyIHtcclxuICBzaXplOiBhdXRvO1xyXG59XHJcbiJdfQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport {MedicalRecord} from '../../model/medicalRecord';\r\nimport {MedicalRecordService} from '../../services/medical-record.service';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\nimport {User} from '../../model/user';\r\n\r\n@Component({\r\n  selector: 'app-medical-record-patient',\r\n  templateUrl: './medical-record-patient.component.html',\r\n  styleUrls: ['./medical-record-patient.component.css']\r\n})\r\nexport class MedicalRecordPatientComponent implements OnInit {\r\n\r\n  height = 0;\r\n  weight = 0;\r\n  bloodType = '';\r\n  allergies = '';\r\n  reports = '';\r\n  records: Array<MedicalRecord> = new Array<MedicalRecord>();\r\n  loggedUser: string = this.userService.isLoggedIn();\r\n  user: User;\r\n  mr: MedicalRecord;\r\n  constructor(private medicalRecordService: MedicalRecordService, private userService: UserServiceService) {\r\n    this.mr = medicalRecordService.getMRFP();\r\n    this.user = JSON.parse(this.loggedUser);\r\n    this.setAll();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.setAll();\r\n  }\r\n\r\n  setAll() {\r\n    if (this.mr !== null) {\r\n      this.height = this.mr.height;\r\n      this.weight = this.mr.weight;\r\n      this.bloodType = this.mr.bloodType;\r\n      this.allergies = this.mr.allergies;\r\n      for (const r of this.mr.examinationReports) {\r\n        this.reports = r.comment + '\\n';\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","export default \"div {\\r\\n  width: 100%;\\r\\n\\r\\n}\\r\\n\\r\\ntable {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n  width: 75%;\\r\\n}\\r\\n\\r\\nmat-paginator {\\r\\n  width: 75%;\\r\\n  margin-left:300px;\\r\\n}\\r\\n\\r\\ntr.example-detail-row {\\r\\n  height: 0;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):hover {\\r\\n  background: #777;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):active {\\r\\n  background: #efefef;\\r\\n}\\r\\n\\r\\n.example-element-row td {\\r\\n  border-bottom-width: 0;\\r\\n}\\r\\n\\r\\n.example-element-detail {\\r\\n  overflow: hidden;\\r\\n  display: -webkit-box;\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.example-element-diagram {\\r\\n  min-width: 80px;\\r\\n  border: 2px solid black;\\r\\n  padding: 8px;\\r\\n  font-weight: lighter;\\r\\n  margin: 8px 0;\\r\\n  height: 104px;\\r\\n}\\r\\n\\r\\n.example-element-name {\\r\\n  font-weight: bold;\\r\\n  font-size: 40px;\\r\\n  line-height: normal;\\r\\n}\\r\\n\\r\\n.example-element-description {\\r\\n  padding: 16px;\\r\\n}\\r\\n\\r\\n.example-element-description-attribution {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9tZWRpY2FtZW50cy9tZWRpY2FtZW50cy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBVzs7QUFFYjs7QUFFQTtFQUNFLFVBQVU7RUFDVixlQUFlO0VBQ2YsaUJBQWlCOztBQUVuQjs7QUFDQTtFQUNFLGVBQWU7RUFDZixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLFVBQVU7QUFDWjs7QUFDQTtFQUNFLFVBQVU7RUFDVixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxTQUFTO0FBQ1g7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsb0JBQWE7RUFBYixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsdUJBQXVCO0VBQ3ZCLFlBQVk7RUFDWixvQkFBb0I7RUFDcEIsYUFBYTtFQUNiLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsWUFBWTtBQUNkIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9tZWRpY2FtZW50cy9tZWRpY2FtZW50cy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiZGl2IHtcclxuICB3aWR0aDogMTAwJTtcclxuXHJcbn1cclxuXHJcbnRhYmxlIHtcclxuICB3aWR0aDogNzUlO1xyXG4gIG1hcmdpbi10b3A6NTBweDtcclxuICBtYXJnaW4tbGVmdDozMDBweDtcclxuXHJcbn1cclxuLm1hdC1mb3JtLWZpZWxkIHtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbiAgbWFyZ2luLXRvcDo1MHB4O1xyXG4gIG1hcmdpbi1sZWZ0OjMwMHB4O1xyXG4gIHdpZHRoOiA3NSU7XHJcbn1cclxubWF0LXBhZ2luYXRvciB7XHJcbiAgd2lkdGg6IDc1JTtcclxuICBtYXJnaW4tbGVmdDozMDBweDtcclxufVxyXG5cclxudHIuZXhhbXBsZS1kZXRhaWwtcm93IHtcclxuICBoZWlnaHQ6IDA7XHJcbn1cclxuXHJcbnRyLmV4YW1wbGUtZWxlbWVudC1yb3c6bm90KC5leGFtcGxlLWV4cGFuZGVkLXJvdyk6aG92ZXIge1xyXG4gIGJhY2tncm91bmQ6ICM3Nzc7XHJcbn1cclxuXHJcbnRyLmV4YW1wbGUtZWxlbWVudC1yb3c6bm90KC5leGFtcGxlLWV4cGFuZGVkLXJvdyk6YWN0aXZlIHtcclxuICBiYWNrZ3JvdW5kOiAjZWZlZmVmO1xyXG59XHJcblxyXG4uZXhhbXBsZS1lbGVtZW50LXJvdyB0ZCB7XHJcbiAgYm9yZGVyLWJvdHRvbS13aWR0aDogMDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1kZXRhaWwge1xyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgZGlzcGxheTogZmxleDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1kaWFncmFtIHtcclxuICBtaW4td2lkdGg6IDgwcHg7XHJcbiAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XHJcbiAgcGFkZGluZzogOHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiBsaWdodGVyO1xyXG4gIG1hcmdpbjogOHB4IDA7XHJcbiAgaGVpZ2h0OiAxMDRweDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1uYW1lIHtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBmb250LXNpemU6IDQwcHg7XHJcbiAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1kZXNjcmlwdGlvbiB7XHJcbiAgcGFkZGluZzogMTZweDtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1kZXNjcmlwdGlvbi1hdHRyaWJ1dGlvbiB7XHJcbiAgb3BhY2l0eTogMC41O1xyXG59XHJcblxyXG4iXX0= */\"","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Nurse} from '../../model/nurse';\r\nimport {User} from '../../model/user';\r\nimport {Router} from '@angular/router';\r\nimport {NurseServiceService} from '../../services/nurse-service.service';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\nimport {Role} from '../../model/role';\r\nimport {Medicaments} from '../../model/Medicaments';\r\nimport {MedicamentsService} from '../../services/medicaments.service';\r\nimport {MatPaginator, MatTableDataSource} from '@angular/material';\r\nimport {Clinic} from '../../model/clinic';\r\n\r\n@Component({\r\n  selector: 'app-medicaments',\r\n  templateUrl: './medicaments.component.html',\r\n  styleUrls: ['./medicaments.component.css']\r\n})\r\nexport class MedicamentsComponent implements OnInit {\r\n\r\n  addMedicamentForm: FormGroup;\r\n  submitted = false;\r\n  medicaments: Array<Medicaments> = new Array<Medicaments>();\r\n  medicament: Medicaments;\r\n  dataSource = new MatTableDataSource<Medicaments>();\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  displayedColumns = ['id', 'title', 'description', 'strenght'];\r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router, private medicamentService: MedicamentsService,\r\n              private  userService: UserServiceService) {\r\n\r\n    this.medicaments = this.medicamentService.getAllMedicaments();\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.addMedicamentForm = this.formBuilder.group({\r\n\r\n      id: new FormControl('', [Validators.required]),\r\n      title: new FormControl('', [Validators.required]),\r\n      description: new FormControl('', [Validators.required]),\r\n      strenght: new FormControl('', [Validators.required]),\r\n    });\r\n\r\n    this.all();\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n\r\n  get f() {\r\n    return this.addMedicamentForm.controls;\r\n  }\r\n\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.addMedicamentForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.medicament = new Medicaments(\r\n      this.f.id.value,\r\n      this.f.title.value,\r\n      this.f.description.value,\r\n      this.f.strenght.value,\r\n    );\r\n\r\n    this.medicament = new Medicaments(this.f.id.value,\r\n      this.f.title.value,\r\n      this.f.description.value,\r\n      this.f.strenght.value);\r\n    this.createMedicament();\r\n  }\r\n\r\n  private createMedicament() {\r\n    this.medicamentService.newMedicament(this.medicament).subscribe(\r\n      data => {\r\n        this.medicamentService.addMedicament(this.medicament);\r\n        this.router.navigate(['/clinical-centre-admin/home']);\r\n      },\r\n      error => {\r\n        alert('Error adding medicament');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  all() {\r\n    this.dataSource = new MatTableDataSource<Medicaments>(this.medicamentService.getAllMedicaments());\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbnVyc2UtZGF0ZS1waWNrZXIvbnVyc2UtZGF0ZS1waWNrZXIuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nurse-date-picker',\r\n  templateUrl: './nurse-date-picker.component.html',\r\n  styleUrls: ['./nurse-date-picker.component.css']\r\n})\r\nexport class NurseDatePickerComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n/** @title Basic datepicker */\r\n\r\n\r\n","export default \"div {\\r\\n  width: 100%;\\r\\n\\r\\n}\\r\\n\\r\\ntable {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n  width: 75%;\\r\\n}\\r\\n\\r\\nmat-paginator {\\r\\n  width: 75%;\\r\\n  margin-left:300px;\\r\\n}\\r\\n\\r\\ntr.example-detail-row {\\r\\n  height: 0;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):hover {\\r\\n  background: #777;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):active {\\r\\n  background: #efefef;\\r\\n}\\r\\n\\r\\n.example-element-row td {\\r\\n  border-bottom-width: 0;\\r\\n}\\r\\n\\r\\n.example-element-detail {\\r\\n  overflow: hidden;\\r\\n  display: -webkit-box;\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.example-element-diagram {\\r\\n  min-width: 80px;\\r\\n  border: 2px solid black;\\r\\n  padding: 8px;\\r\\n  font-weight: lighter;\\r\\n  margin: 8px 0;\\r\\n  height: 104px;\\r\\n}\\r\\n\\r\\n.example-element-name {\\r\\n  font-weight: bold;\\r\\n  font-size: 40px;\\r\\n  line-height: normal;\\r\\n}\\r\\n\\r\\n.example-element-description {\\r\\n  padding: 16px;\\r\\n}\\r\\n\\r\\n.example-element-description-attribution {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9udXJzZS1saXN0LXBhdGllbnQvbnVyc2UtbGlzdC1wYXRpZW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFXOztBQUViOztBQUVBO0VBQ0UsVUFBVTtFQUNWLGVBQWU7RUFDZixpQkFBaUI7O0FBRW5COztBQUNBO0VBQ0UsZUFBZTtFQUNmLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsVUFBVTtBQUNaOztBQUNBO0VBQ0UsVUFBVTtFQUNWLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLFNBQVM7QUFDWDs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixvQkFBYTtFQUFiLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGVBQWU7RUFDZix1QkFBdUI7RUFDdkIsWUFBWTtFQUNaLG9CQUFvQjtFQUNwQixhQUFhO0VBQ2IsYUFBYTtBQUNmOztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLGVBQWU7RUFDZixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxZQUFZO0FBQ2QiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL251cnNlLWxpc3QtcGF0aWVudC9udXJzZS1saXN0LXBhdGllbnQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImRpdiB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcblxyXG59XHJcblxyXG50YWJsZSB7XHJcbiAgd2lkdGg6IDc1JTtcclxuICBtYXJnaW4tdG9wOjUwcHg7XHJcbiAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcblxyXG59XHJcbi5tYXQtZm9ybS1maWVsZCB7XHJcbiAgZm9udC1zaXplOiAxNHB4O1xyXG4gIG1hcmdpbi10b3A6NTBweDtcclxuICBtYXJnaW4tbGVmdDozMDBweDtcclxuICB3aWR0aDogNzUlO1xyXG59XHJcbm1hdC1wYWdpbmF0b3Ige1xyXG4gIHdpZHRoOiA3NSU7XHJcbiAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcbn1cclxuXHJcbnRyLmV4YW1wbGUtZGV0YWlsLXJvdyB7XHJcbiAgaGVpZ2h0OiAwO1xyXG59XHJcblxyXG50ci5leGFtcGxlLWVsZW1lbnQtcm93Om5vdCguZXhhbXBsZS1leHBhbmRlZC1yb3cpOmhvdmVyIHtcclxuICBiYWNrZ3JvdW5kOiAjNzc3O1xyXG59XHJcblxyXG50ci5leGFtcGxlLWVsZW1lbnQtcm93Om5vdCguZXhhbXBsZS1leHBhbmRlZC1yb3cpOmFjdGl2ZSB7XHJcbiAgYmFja2dyb3VuZDogI2VmZWZlZjtcclxufVxyXG5cclxuLmV4YW1wbGUtZWxlbWVudC1yb3cgdGQge1xyXG4gIGJvcmRlci1ib3R0b20td2lkdGg6IDA7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtZGV0YWlsIHtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtZGlhZ3JhbSB7XHJcbiAgbWluLXdpZHRoOiA4MHB4O1xyXG4gIGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrO1xyXG4gIHBhZGRpbmc6IDhweDtcclxuICBmb250LXdlaWdodDogbGlnaHRlcjtcclxuICBtYXJnaW46IDhweCAwO1xyXG4gIGhlaWdodDogMTA0cHg7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtbmFtZSB7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgZm9udC1zaXplOiA0MHB4O1xyXG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtZGVzY3JpcHRpb24ge1xyXG4gIHBhZGRpbmc6IDE2cHg7XHJcbn1cclxuXHJcbi5leGFtcGxlLWVsZW1lbnQtZGVzY3JpcHRpb24tYXR0cmlidXRpb24ge1xyXG4gIG9wYWNpdHk6IDAuNTtcclxufVxyXG5cclxuIl19 */\"","import {Component, Input, OnInit, ViewChild} from '@angular/core';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {Patient} from '../../model/patient';\r\nimport {MatDialog, MatPaginator, MatTableDataSource} from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'app-nurse-list-patient',\r\n  templateUrl: './nurse-list-patient.component.html',\r\n  styleUrls: ['./nurse-list-patient.component.css']\r\n})\r\nexport class NurseListPatientComponent implements OnInit {\r\n\r\n  patient: Patient;\r\n  displayedColumns: string[] = ['name', 'surname', 'insuranceID'];\r\n  dataSource = new MatTableDataSource<Patient>();\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  expandedElement: Patient;\r\n  patients: Array<Patient> = new Array<Patient>();\r\n  constructor(\r\n    private patientService: PatientService,\r\n\r\n  ) {\r\n\r\n    this.patients = this.patientService.getAllPatients();\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  all() {\r\n    this.dataSource = new MatTableDataSource<Patient>(this.patientService.getAllPatients());\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbnVyc2UtcHJvZmlsZS9udXJzZS1wcm9maWxlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Nurse} from '../../model/nurse';\r\nimport {User} from '../../model/user';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\nimport {Router} from '@angular/router';\r\nimport {NurseServiceService} from '../../services/nurse-service.service';\r\nimport {Role} from '../../model/role';\r\n\r\n@Component({\r\n  selector: 'app-nurse-profile',\r\n  templateUrl: './nurse-profile.component.html',\r\n  styleUrls: ['./nurse-profile.component.css']\r\n})\r\nexport class NurseProfileComponent implements OnInit {\r\n\r\n  nurseProfileForm: FormGroup;\r\n  submitted = false;\r\n  nurse: Nurse;\r\n  selectedNurse: Nurse;\r\n  user: User;\r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router, private nurseService: NurseServiceService,\r\n              private  userService: UserServiceService) {\r\n    this.user = JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedNurse = nurseService.getNurse(this.user.email);\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    this.nurseProfileForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedNurse.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedNurse.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedNurse.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedNurse.surname, [Validators.required]),\r\n      phone: new FormControl(this.selectedNurse.phone, [Validators.required]),\r\n      workHoursFrom: new FormControl(this.selectedNurse.workHoursFrom, [Validators.required]),\r\n      workHoursTo: new FormControl(this.selectedNurse.workHoursTo, [Validators.required]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.nurseProfileForm.controls;\r\n  }\r\n\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.nurseProfileForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.nurse = new Nurse(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.phone.value,\r\n      this.f.workHoursFrom.value,\r\n      this.f.workHoursTo.value,\r\n    );\r\n\r\n    this.user = new User(this.f.email.value, this.f.password.value, Role.NURSE);\r\n\r\n    this.editNurse();\r\n  }\r\n\r\n  private editNurse() {\r\n    this.nurseService.editNurse(this.nurse).subscribe(\r\n      data => {\r\n        this.userService.setUser(this.user);\r\n        this.nurseService.setNurse(this.nurse);\r\n        this.router.navigate(['/nurse/home']);\r\n      },\r\n      error => {\r\n        alert('Error edit nurse');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbnVyc2UtdmFjYXRpb24tcmVxdWVzdC9udXJzZS12YWNhdGlvbi1yZXF1ZXN0LmNvbXBvbmVudC5jc3MifQ== */\"","import {Component, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {MatDialog} from '@angular/material';\r\nimport {Router} from '@angular/router';\r\nimport {Zahtev} from '../../model/Zahtev';\r\nimport {VacationService} from '../../services/vacation.service';\r\nimport {ZahtevStatus} from '../../model/ZahtevStatus';\r\n\r\n@Component({\r\n  selector: 'app-nurse-vacation-request',\r\n  templateUrl: './nurse-vacation-request.component.html',\r\n  styleUrls: ['./nurse-vacation-request.component.css']\r\n})\r\nexport class NurseVacationRequestComponent implements OnInit {\r\n\r\n  vacationRequestForm: FormGroup;\r\n  submitted = false;\r\n  zahtev: Zahtev;\r\n\r\n  constructor(public dialog: MatDialog,\r\n              private formBuilder: FormBuilder,\r\n              private router: Router,\r\n              private vacationService: VacationService,\r\n              ) {}\r\n\r\n\r\n  ngOnInit() {\r\n    this.vacationRequestForm = this.formBuilder.group({\r\n      email: new FormControl('', [Validators.required]),\r\n      name: new FormControl('', [Validators.required]),\r\n      surname: new FormControl('', [Validators.required]),\r\n      startingDate: new FormControl('', [Validators.required]),\r\n      finishDate: new FormControl('', [Validators.required]),\r\n\r\n    });\r\n\r\n  }\r\n\r\n\r\n  get f() {\r\n    return this.vacationRequestForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.vacationRequestForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.zahtev = new Zahtev(\r\n      this.f.email.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.startingDate.value,\r\n      this.f.finishDate.value,\r\n      ZahtevStatus.AWAITING_APPROVAL\r\n    );\r\n\r\n    // tslint:disable-next-line:max-line-length\r\n    this.zahtev = new Zahtev(this.f.email.value, this.f.name.value, this.f.surname.value, this.f.startingDate.value, this.f.finishDate.value, ZahtevStatus.AWAITING_APPROVAL);\r\n\r\n    this.createVacation();\r\n\r\n  }\r\n\r\n  private createVacation() {\r\n    console.log('ovde sam');\r\n\r\n    this.vacationService.newVacation(this.zahtev).subscribe(\r\n      data => {\r\n        console.log('unutra sam');\r\n\r\n        this.vacationService.addVacation(this.zahtev);\r\n        this.router.navigate(['/nurse/home']);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        console.log('greska');\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcGF0aWVudC1tYWtlLWV4YW1pbmF0aW9uL3BhdGllbnQtbWFrZS1leGFtaW5hdGlvbi5jb21wb25lbnQuY3NzIn0= */\"","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup} from '@angular/forms';\r\nimport {Doctor} from '../../model/doctor';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';\r\nimport {DoctorService} from '../../services/doctor.service';\r\nimport {ExaminationService} from '../../services/examination.service';\r\nimport {Patient} from '../../model/patient';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {User} from '../../model/user';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\nimport {ClinicService} from '../../services/clinic.service';\r\nimport {Clinic} from '../../model/clinic';\r\nimport {AdminClinicStatus} from '../../model/adminClinicStatus';\r\nimport {AdminClinic} from '../../model/adminClinic';\r\nimport {AdminClinicService} from '../../services/admin-clinic.service';\r\n\r\n@Component({\r\n  selector: 'app-patient-make-examination',\r\n  templateUrl: './patient-make-examination.component.html',\r\n  styleUrls: ['./patient-make-examination.component.css']\r\n})\r\nexport class PatientMakeExaminationComponent implements OnInit {\r\n\r\n  MakeGroup: FormGroup;\r\n  termins: Array<string> = new Array<string>();\r\n  kinds: Array<string> = new Array<string>();\r\n  AdminClinics: Array<AdminClinic> = new Array<AdminClinic>();\r\n  doctor: Doctor;\r\n  date: string;\r\n  user: User;\r\n  clinic: Clinic;\r\n  type: string;\r\n  k = 'Examination';\r\n  adminsClinic = '';\r\n\r\n  constructor(private dialogRef: MatDialogRef<PatientMakeExaminationComponent>,\r\n              private doctorService: DoctorService,\r\n              private clinicService: ClinicService,\r\n              private formBuilder: FormBuilder,\r\n              private examinationServce: ExaminationService,\r\n              private userService: UserServiceService,\r\n              private adminClinicService: AdminClinicService,\r\n              @Inject(MAT_DIALOG_DATA) data) {\r\n      this.doctor = doctorService.getDoctorForMake();\r\n      this.date = doctorService.getDate();\r\n      this.termins = doctorService.getDoctorsTermins(this.date, this.doctor.email);\r\n      this.user = userService.getLoggedUser();\r\n      this.type = clinicService.getType();\r\n      this.clinic = clinicService.getClinicForExamination();\r\n      this.AdminClinics = adminClinicService.getAdminClinicsWithClinicId(this.clinic.id.toString());\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.MakeGroup = this.formBuilder.group({\r\n      terminTime: new FormControl(''),\r\n    });\r\n  }\r\n\r\n\r\n  get f() {\r\n    return this.MakeGroup.controls;\r\n  }\r\n\r\n  save() {\r\n    if (this.MakeGroup.invalid) {\r\n      return;\r\n    }\r\n\r\n    const interval = this.f.terminTime.value;\r\n    console.log(this.AdminClinics)\r\n    for (const a of this.AdminClinics) {\r\n      this.adminsClinic = this.adminsClinic + a.email + ',';\r\n    }\r\n\r\n    const finalAdminClinic = this.adminsClinic.substring(0, this.adminsClinic.length - 1);\r\n    console.log(finalAdminClinic);\r\n\r\n    this.examinationServce.makeExamination(interval, this.user.email, this.doctor.email, this.type, this.clinic.id.toString(), this.k, finalAdminClinic).subscribe(data => {\r\n      this.dialogRef.close();\r\n    }, error => {\r\n      console.log(error);\r\n    });\r\n  }\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcGF0aWVudC1wcm9maWxlL3BhdGllbnQtcHJvZmlsZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Patient} from '../../model/patient';\r\nimport {Router} from '@angular/router';\r\nimport {PatientStatus} from '../../model/patientStatus';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\nimport {User} from '../../model/user';\r\nimport {Role} from '../../model/role';\r\nimport {__values} from 'tslib';\r\n\r\n@Component({\r\n  selector: 'app-patient-profile',\r\n  templateUrl: './patient-profile.component.html',\r\n  styleUrls: ['./patient-profile.component.css']\r\n})\r\nexport class PatientProfileComponent implements OnInit {\r\n\r\n  patientProfileForm: FormGroup;\r\n  submitted = false;\r\n  patient: Patient;\r\n  selectedPatient: Patient;\r\n  user: User;\r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router, private patientService: PatientService,\r\n              private  userService: UserServiceService) {\r\n    this.user = JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedPatient = patientService.getPatient(this.user.email);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.patientProfileForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedPatient.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedPatient.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedPatient.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedPatient.surname, [Validators.required]),\r\n      address: new FormControl(this.selectedPatient.address, [Validators.required]),\r\n      city: new FormControl(this.selectedPatient.city, [Validators.required]),\r\n      country: new FormControl(this.selectedPatient.country, [Validators.required]),\r\n      number: new FormControl(this.selectedPatient.number, [Validators.required, Validators.minLength(9)]),\r\n      insuranceID: new FormControl(this.selectedPatient.insuranceID, [Validators.required, Validators.minLength(13),\r\n         Validators.maxLength(13)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.patientProfileForm.controls;\r\n  }\r\n\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.patientProfileForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.patient = new Patient(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.address.value,\r\n      this.f.city.value,\r\n      this.f.country.value,\r\n      this.f.insuranceID.value,\r\n      PatientStatus.AWAITING_APPROVAL\r\n    );\r\n\r\n    this.user = new User(this.f.email.value, this.f.password.value, Role.PATIENT);\r\n\r\n    this.editPatient();\r\n  }\r\n\r\n  private editPatient() {\r\n    this.patientService.editPatient(this.patient).subscribe(\r\n      data => {\r\n        this.userService.setUser(this.user);\r\n        this.patientService.setPatient(this.patient);\r\n        this.router.navigate(['/patient/home']);\r\n      },\r\n      error => {\r\n        alert('Error edit patient');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","export default \"table {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9wcmVkZWYtZXhhbWluYXRpb24tZGlhbG9nL3ByZWRlZi1leGFtaW5hdGlvbi1kaWFsb2cuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVc7QUFDYiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcHJlZGVmLWV4YW1pbmF0aW9uLWRpYWxvZy9wcmVkZWYtZXhhbWluYXRpb24tZGlhbG9nLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0YWJsZSB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxuIl19 */\"","import { Component, OnInit } from '@angular/core';\r\nimport {MatDialogRef, MatTableDataSource} from '@angular/material';\r\nimport {Examination} from '../../model/examination';\r\nimport {DoctorService} from '../../services/doctor.service';\r\nimport {ExaminationService} from '../../services/examination.service';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-predef-examination-dialog',\r\n  templateUrl: './predef-examination-dialog.component.html',\r\n  styleUrls: ['./predef-examination-dialog.component.css']\r\n})\r\nexport class PredefExaminationDialogComponent implements OnInit {\r\n\r\n  ExaminationDataSource: MatTableDataSource<Examination>;\r\n  displayedColumns: string[] = ['StartDate', 'EndDate', 'DoctorName', 'DoctorSurname', 'Type', 'Price', 'Discount', 'Make'];\r\n  examinations: Array<Examination> = new Array<Examination>();\r\n\r\n  constructor(private examinationService: ExaminationService,\r\n              private userService: UserServiceService,\r\n              private dialogRef: MatDialogRef<PredefExaminationDialogComponent>) {\r\n    this.examinations = examinationService.getAllPredefExaminations();\r\n    console.log(this.examinations);\r\n    this.ExaminationDataSource = new MatTableDataSource(this.examinations);\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  make(examination) {\r\n    const id = examination.id.toLocaleString();\r\n    const user = this.userService.getLoggedUser();\r\n    this.examinationService.makePredefExamination(id, user.email).subscribe(data => {\r\n      this.examinations = this.examinationService.getAllPredefExaminations();\r\n      this.ExaminationDataSource = new MatTableDataSource(this.examinations);\r\n    }, error => {\r\n        console.log(error);\r\n    });\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcmF0ZS1kb2N0b3ItYW5kLWNsaW5pYy1wYXRpZW50L3JhdGUtZG9jdG9yLWFuZC1jbGluaWMtcGF0aWVudC5jb21wb25lbnQuY3NzIn0= */\"","import {Component, Inject, OnInit} from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {Examination} from '../../model/examination';\nimport {ExaminationService} from '../../services/examination.service';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';\n\n@Component({\n  selector: 'app-rate-doctor-and-clinic-patient',\n  templateUrl: './rate-doctor-and-clinic-patient.component.html',\n  styleUrls: ['./rate-doctor-and-clinic-patient.component.css']\n})\nexport class RateDoctorAndClinicPatientComponent implements OnInit {\n\n  RateFormGroup: FormGroup;\n  doctorRate = '';\n  clinicRate = '';\n  examination: Examination;\n  constructor(private formBuilder: FormBuilder,\n              private examinationService: ExaminationService,\n              private dialogRef: MatDialogRef<RateDoctorAndClinicPatientComponent>,\n              @Inject(MAT_DIALOG_DATA) data) {\n    this.examination = examinationService.getExaminationForRating();\n  }\n\n  ngOnInit() {\n    this.RateFormGroup = this.formBuilder.group({\n      doctorRating: new FormControl('', [Validators.required, Validators.minLength(1), Validators.maxLength(1),\n        Validators.pattern('[0-5]*')]),\n      clinicRating: new FormControl('', [Validators.required, Validators.minLength(1), Validators.maxLength(1),\n        Validators.pattern('[0-5]*')])\n    });\n  }\n\n  get f() {\n    return this.RateFormGroup.controls;\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n\n  save() {\n    if (this.RateFormGroup.invalid) {\n      return;\n    }\n\n    this.doctorRate = this.f.doctorRating.value;\n    this.clinicRate = this.f.clinicRating.value;\n\n    console.log(this.doctorRate);\n    console.log(this.clinicRate);\n    this.examinationService.RateDoctorAndClinic(this.examination.id.toString(), this.doctorRate, this.clinicRate).subscribe(data => {\n      this.dialogRef.close();\n    }, error => {\n        console.log(error);\n    });\n\n  }\n\n}\n","export default \"table {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9yZWdpc3Rlci1yZXF1ZXN0cy9yZWdpc3Rlci1yZXF1ZXN0cy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsVUFBVTtFQUNWLGVBQWU7RUFDZixpQkFBaUI7O0FBRW5CIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9yZWdpc3Rlci1yZXF1ZXN0cy9yZWdpc3Rlci1yZXF1ZXN0cy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsidGFibGUge1xyXG4gIHdpZHRoOiA3NSU7XHJcbiAgbWFyZ2luLXRvcDo1MHB4O1xyXG4gIG1hcmdpbi1sZWZ0OjMwMHB4O1xyXG5cclxufVxyXG4iXX0= */\"","import {ChangeDetectorRef, Component, OnInit} from '@angular/core';\r\nimport {MatTableDataSource} from '@angular/material';\r\nimport {Patient} from '../../model/patient';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {PatientStatus} from '../../model/patientStatus';\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-register-requests',\r\n  templateUrl: './register-requests.component.html',\r\n  styleUrls: ['./register-requests.component.css']\r\n})\r\nexport class RegisterRequestsComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['email', 'approving'];\r\n  RequestsDataSource = new MatTableDataSource<Patient>();\r\n  p: Patient;\r\n  constructor(private patientService: PatientService, private changeDetectorRef: ChangeDetectorRef,\r\n              private router: Router) {\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n  }\r\n\r\n  all() {\r\n    this.RequestsDataSource = new MatTableDataSource<Patient>(this.patientService.getAllRequests());\r\n  }\r\n\r\n  onAccept(patient) {\r\n    this.p = this.patientService.getPatient(patient.email);\r\n    this.p.status = PatientStatus.APPROVED;\r\n    this.editPatient(patient);\r\n    this.deleteRow(patient);\r\n\r\n  }\r\n\r\n  private editPatient(patient) {\r\n    this.patientService.editPatient(this.p).subscribe(\r\n      data => {\r\n        this.patientService.setPatient(this.p);\r\n        this.deleteRow(patient);\r\n        this.router.navigate(['/clinical-centre-admin/requests']);\r\n      },\r\n      error => {\r\n        alert('Error edit patient');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  deleteRow(d) {\r\n    const index = this.RequestsDataSource.data.indexOf(d);\r\n    this.RequestsDataSource.data.splice(index, 1);\r\n  }\r\n\r\n}\r\n","export default \".example-full-width {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.main-content {\\r\\n  padding: 20px 0;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9yZWdpc3RyYXRpb24vcmVnaXN0cmF0aW9uLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9yZWdpc3RyYXRpb24vcmVnaXN0cmF0aW9uLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXhhbXBsZS1mdWxsLXdpZHRoIHtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuLm1haW4tY29udGVudCB7XHJcbiAgcGFkZGluZzogMjBweCAwO1xyXG59XHJcbiJdfQ== */\"","import {Component, OnInit} from '@angular/core';\r\nimport {Patient} from '../../model/patient';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {PatientStatus} from '../../model/patientStatus';\r\nimport {User} from '../../model/user';\r\nimport {Role} from '../../model/role';\r\nimport {UserServiceService} from '../../services/user-service.service';\r\n\r\n@Component({\r\n  selector: 'app-registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.css']\r\n})\r\nexport class RegistrationComponent implements OnInit {\r\n\r\n  registerForm: FormGroup;\r\n  submitted = false;\r\n  patient: Patient;\r\n  user: User;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserServiceService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.formBuilder.group({\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      password: new FormControl('', [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      repeatPassword: new FormControl('', [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl('', [Validators.required]),\r\n      surname: new FormControl('', [Validators.required]),\r\n      address: new FormControl('', [Validators.required]),\r\n      city: new FormControl('', [Validators.required]),\r\n      country: new FormControl('', [Validators.required]),\r\n      number: new FormControl('', [Validators.required, Validators.minLength(9)]),\r\n      insuranceID: new FormControl('', [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.registerForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    if (this.f.password.value !== this.f.repeatPassword.value) {\r\n      alert('Repeat password must be like passoword');\r\n      return;\r\n    }\r\n\r\n    this.patient = new Patient(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.address.value,\r\n      this.f.city.value,\r\n      this.f.country.value,\r\n      this.f.insuranceID.value,\r\n      PatientStatus.AWAITING_APPROVAL\r\n    );\r\n\r\n    this.user = new User(this.f.email.value, this.f.password.value, Role.PATIENT);\r\n\r\n    this.createPatient();\r\n  }\r\n\r\n  private createPatient() {\r\n    this.patientService.newPatient(this.patient).subscribe(\r\n      data => {\r\n        this.userService.addUser(this.user);\r\n        this.patientService.addPatient(this.patient);\r\n        this.router.navigate(['/login']);\r\n        alert('Successful register');\r\n      },\r\n      error => {\r\n        alert('Error registration');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","export default \"table {\\r\\n  width: 75%;\\r\\n  margin-top:50px;\\r\\n  margin-left:300px;\\r\\n\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy92YWNhdGlvbi1yZXF1ZXN0LXJlZ2lzdGVyL3ZhY2F0aW9uLXJlcXVlc3QtcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFVBQVU7RUFDVixlQUFlO0VBQ2YsaUJBQWlCOztBQUVuQiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdmFjYXRpb24tcmVxdWVzdC1yZWdpc3Rlci92YWNhdGlvbi1yZXF1ZXN0LXJlZ2lzdGVyLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0YWJsZSB7XHJcbiAgd2lkdGg6IDc1JTtcclxuICBtYXJnaW4tdG9wOjUwcHg7XHJcbiAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcblxyXG59XHJcbiJdfQ== */\"","import {ChangeDetectorRef, Component, OnInit} from '@angular/core';\r\nimport {MatTableDataSource} from '@angular/material';\r\nimport {Router} from '@angular/router';\r\nimport {Zahtev} from '../../model/Zahtev';\r\nimport {VacationService} from '../../services/vacation.service';\r\nimport {ZahtevStatus} from '../../model/ZahtevStatus';\r\n\r\n@Component({\r\n  selector: 'app-vacation-request-register',\r\n  templateUrl: './vacation-request-register.component.html',\r\n  styleUrls: ['./vacation-request-register.component.css']\r\n})\r\nexport class VacationRequestRegisterComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['email', 'startingDate', 'finishDate', 'approving'];\r\n  RequestsDataSource = new MatTableDataSource<Zahtev>();\r\n  p: Zahtev;\r\n  constructor(private vacationService: VacationService, private changeDetectorRef: ChangeDetectorRef,\r\n              private router: Router) {\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n  }\r\n\r\n  all() {\r\n    this.RequestsDataSource = new MatTableDataSource<Zahtev>(this.vacationService.getAllRequests());\r\n  }\r\n\r\n  onAccept(zahtev) {\r\n    this.p = this.vacationService.getVacations(zahtev.email);\r\n    this.p.status = ZahtevStatus.APPROVED;\r\n    this.editVacation(zahtev);\r\n    this.deleteRow(zahtev);\r\n\r\n  }\r\n\r\n  private editVacation(zahtev) {\r\n    this.vacationService.editVacation(this.p).subscribe(\r\n      data => {\r\n        this.vacationService.setVacation(this.p);\r\n        this.deleteRow(zahtev);\r\n        this.router.navigate(['/clinical-centre-admin/VacationRequests']);\r\n      },\r\n      error => {\r\n        alert('Error edit request');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  deleteRow(d) {\r\n    const index = this.RequestsDataSource.data.indexOf(d);\r\n    this.RequestsDataSource.data.splice(index, 1);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { CdkStepperModule } from '@angular/cdk/stepper';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { CdkTreeModule } from '@angular/cdk/tree';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\n\r\n@NgModule({\r\n  exports: [\r\n    A11yModule,\r\n    CdkStepperModule,\r\n    CdkTableModule,\r\n    CdkTreeModule,\r\n    DragDropModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    PortalModule,\r\n    ScrollingModule,\r\n  ]\r\n})\r\nexport class DemoMaterialModule { }\r\n","\r\nexport class ClinicalCentreAdministrator {\r\n\r\n  email: string;\r\n  password: string;\r\n  name: string;\r\n  surname: string;\r\n  number: string;\r\n\r\n\r\n  constructor(email: string, password: string, name: string, surname: string, number1: string) {\r\n    this.email = email;\r\n    this.password = password;\r\n    this.name = name;\r\n    this.surname = surname;\r\n    this.number = number1;\r\n  }\r\n}\r\n","import construct = Reflect.construct;\r\n\r\nexport class Diagnose{\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n\r\n\r\n  constructor(id: number, title: string, description: string){\r\n    this.id = id;\r\n    this.title = title;\r\n    this.description = description;\r\n  }\r\n}\r\n\r\n","import {parseJsonSchemaToCommandDescription} from '@angular/cli/utilities/json-schema';\r\n\r\nexport class Medicaments{\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  strenght: string;\r\n\r\n  constructor(id: number, title: string, description: string, strenght: string){\r\n    this.id = id;\r\n    this.title = title;\r\n    this.description = description;\r\n    this.strenght = strenght;\r\n}\r\n}\r\n","import {Clinic} from './clinic';\r\nimport {Doctor} from './doctor';\r\nimport {ZahtevStatus} from './ZahtevStatus';\r\n\r\nexport class Zahtev {\r\n\r\n  email: string;\r\n  name: string;\r\n  surname: string;\r\n  startingDate: string;\r\n  finishDate: string;\r\n // doctor: Doctor;\r\n  status: ZahtevStatus;\r\n  constructor(email: string, name: string, surname: string, startingDate: string, finishDate: string, status: ZahtevStatus) {\r\n\r\n    this.email = email;\r\n    this.name = name;\r\n    this.surname = surname;\r\n    this.startingDate = startingDate;\r\n    this.finishDate = finishDate;\r\n   // this.doctor = doctor;\r\n    this.status = status;\r\n  }\r\n}\r\n","export enum ZahtevStatus {\r\n  AWAITING_APPROVAL,\r\n  APPROVED\r\n}\r\n","import {AdminClinicStatus} from './adminClinicStatus';\r\nimport {Clinic} from './clinic';\r\n\r\nexport class AdminClinic {\r\n\r\n  email: string;\r\n  password: string;\r\n  name: string;\r\n  surname: string;\r\n  number: string;\r\n  status: AdminClinicStatus;\r\n  clinic: Clinic;\r\n\r\n  constructor(email: string, password: string, name: string, surname: string, number1: string, clinic?: Clinic, status?: AdminClinicStatus) {\r\n    this.email = email;\r\n    this.password = password;\r\n    this.name = name;\r\n    this.surname = surname;\r\n    this.number = number1;\r\n    this.status = status;\r\n    this.clinic = clinic;\r\n  }\r\n}\r\n\r\n","export enum AdminClinicStatus {\r\n  ACTIVE,\r\n  DELETED\r\n}\r\n","import {Doctor} from './doctor';\r\nimport {ExaminationType} from './examinationType';\r\n\r\nexport class Clinic {\r\n  id: number;\r\n  name: string;\r\n  address: string;\r\n  description: string;\r\n  clinicRating: number;\r\n  doctors: Array<Doctor> = new Array<Doctor>();\r\n  types: Array<ExaminationType> = new Array<ExaminationType>();\r\n\r\n  constructor(name: string, address: string, description: string, doctors: Array<Doctor>, types?: Array<ExaminationType>, clinicRating?: number, id?: number) {\r\n    this.name = name;\r\n    this.address = address;\r\n    this.description = description;\r\n    this.doctors = doctors;\r\n    this.clinicRating = clinicRating;\r\n    this.types = types;\r\n    this.id = id;\r\n  }\r\n}\r\n","import {Clinic} from './clinic';\r\nimport {ExaminationType} from './examinationType';\r\n\r\nexport class Doctor {\r\n\r\n  email: string;\r\n  password: string;\r\n  name: string;\r\n  surname: string;\r\n  phone: string;\r\n  workHoursFrom: string;\r\n  workHoursTo: string;\r\n  clinic: Clinic;\r\n  doctorRating: number;\r\n  specialized: ExaminationType;\r\n\r\n  constructor(email: string, password: string, name: string, surname: string, number1: string, workHoursFrom: string, workHoursTo: string, specialized?: ExaminationType, doctorRating?: number, clinic?: Clinic) {\r\n    this.email = email;\r\n    this.password = password;\r\n    this.name = name;\r\n    this.surname = surname;\r\n    this.phone = number1;\r\n    this.workHoursFrom = workHoursFrom;\r\n    this.workHoursTo = workHoursTo;\r\n    this.doctorRating = doctorRating;\r\n    this.specialized = specialized;\r\n    this.clinic = clinic;\r\n  }\r\n}\r\n","import {ExaminationKind} from './examinationKind';\r\nimport {ExaminationStatus} from './examinationStatus';\r\nimport {ExaminationType} from './examinationType';\r\nimport {Doctor} from './doctor';\r\nimport {Nurse} from './nurse';\r\nimport {Clinic} from './clinic';\r\nimport {Patient} from './patient';\r\nimport {Interval} from './interval';\r\n\r\nexport class Examination {\r\n\r\n  kind: ExaminationKind;\r\n  status: ExaminationStatus;\r\n  examinationType: ExaminationType;\r\n  discount: number;\r\n  doctorRating: number;\r\n  clinicRating: number;\r\n  doctors: Array<Doctor> = new Array<Doctor>();\r\n  nurse: Nurse;\r\n  clinic: Clinic;\r\n  patient: Patient;\r\n  id: number;\r\n  interval: Interval;\r\n  constructor(kind: ExaminationKind, status: ExaminationStatus, examinationType: ExaminationType, discount: number,\r\n              doctorRating: number, clinicRating: number, nurse: Nurse,\r\n              clinic: Clinic, patient: Patient, doctors: Array<Doctor>, id: number, interval?: Interval) {\r\n    this.kind = kind;\r\n    this.status = status;\r\n    this.examinationType = examinationType;\r\n    this.discount = discount;\r\n    this.doctorRating = doctorRating;\r\n    this.clinicRating = clinicRating;\r\n    this.nurse = nurse;\r\n    this.clinic = clinic;\r\n    this.patient = patient;\r\n    this.doctors = doctors;\r\n    this.id = id;\r\n    this.interval = interval;\r\n  }\r\n\r\n}\r\n","export enum ExaminationKind {\r\n  EXAMINATION,\r\n  OPERATION\r\n}\r\n","export class ExaminationReport {\r\n  id: number;\r\n  comment: string;\r\n\r\n  constructor(id: number, comment: string) {\r\n    this.id = id;\r\n    this.comment = comment;\r\n  }\r\n}\r\n","export enum ExaminationStatus {\r\n  APPROVED,\r\n  AWAITING,\r\n  PREDEF_BOOKED,\r\n  PREDEF_AVAILABLE\r\n}\r\n","import {Clinic} from './clinic';\r\n\r\nexport class ExaminationType {\r\n\r\n  label: string;\r\n  price: number;\r\n\r\n  constructor(label: string, price: number) {\r\n    this.label = label;\r\n    this.price = price;\r\n  }\r\n}\r\n","import {Patient} from './patient';\r\nimport {ExaminationReport} from './examinationReport';\r\n\r\nexport class MedicalRecord {\r\n  id: number;\r\n  height: number;\r\n  weight: number;\r\n  bloodType: string;\r\n  allergies: string;\r\n  patient: Patient;\r\n  examinationReports: Array<ExaminationReport> = new Array<ExaminationReport>();\r\n\r\n  constructor(id: number, height: number, weight: number, bloodType: string, allergies: string, patient: Patient, examinationReports?: Array<ExaminationReport>) {\r\n    this.id = id;\r\n    this.height = height;\r\n    this.weight = weight;\r\n    this.bloodType = bloodType;\r\n    this.allergies = allergies;\r\n    this.patient = patient;\r\n    this.examinationReports = examinationReports;\r\n  }\r\n\r\n  public set(height: number, weight: number, bloodType: string, allergies: string, examinationReports?: Array<ExaminationReport>) {\r\n    this.height = height;\r\n    this.weight = weight;\r\n    this.bloodType = bloodType;\r\n    this.allergies = allergies;\r\n    this.examinationReports = examinationReports;\r\n  }\r\n}\r\n","import {TimeInterval} from 'rxjs';\r\nimport {Time} from '@angular/common';\r\n\r\nexport class Nurse {\r\n\r\n  email: string;\r\n  password: string;\r\n  name: string;\r\n  surname: string;\r\n  phone: string;\r\n  workHoursTo: Time;\r\n  workHoursFrom: Time;\r\n\r\n  constructor(email: string, password: string, name: string, surname: string, phone: string, worhHoursTo: Time, worhHoursFrom: Time) {\r\n    this.email = email;\r\n    this.password = password;\r\n    this.name = name;\r\n    this.surname = surname;\r\n    this.phone = phone;\r\n    this.workHoursFrom = worhHoursFrom;\r\n    this.workHoursTo = worhHoursTo;\r\n\r\n  }\r\n\r\n}\r\n","import {PatientStatus} from './patientStatus';\r\nimport {Examination} from './examination';\r\n\r\nexport class Patient {\r\n\r\n  email: string;\r\n  password: string;\r\n  name: string;\r\n  surname: string;\r\n  number: string;\r\n  address: string;\r\n  city: string;\r\n  country: string;\r\n  insuranceID: string;\r\n  status: PatientStatus;\r\n\r\n  constructor(email: string, password: string, name: string, surname: string, number1: string, address: string, city: string,\r\n              country: string, insuranceId: string, status: PatientStatus) {\r\n\r\n      this.email = email;\r\n      this.password = password;\r\n      this.name = name;\r\n      this.surname = surname;\r\n      this.number = number1;\r\n      this.address = address;\r\n      this.country = country;\r\n      this.city = city;\r\n      this.insuranceID = insuranceId;\r\n      this.status = status;\r\n  }\r\n}\r\n\r\n\r\n","\r\nexport enum PatientStatus {\r\n  ACTIVATED,\r\n  AWAITING_APPROVAL,\r\n  APPROVED\r\n}\r\n","export enum Role {\r\n\r\n  PATIENT,\r\n  DOCTOR,\r\n  NURSE,\r\n  CLINIC_ADMINISTRATOR,\r\n  CLINICAL_CENTRE_ADMINISTRATOR,\r\n  NONE\r\n}\r\n","import {Role} from './role';\r\n\r\nexport class User {\r\n\r\n  email: string;\r\n  password: string;\r\n  role: Role;\r\n\r\n  constructor(email: string, password: string, role: Role) {\r\n    this.email = email;\r\n    this.password = password;\r\n    this.role = role;\r\n  }\r\n\r\n  public setAll(email: string, password: string, role: Role) {\r\n    this.email = email;\r\n    this.password = password;\r\n    this.role = role;\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {AdminClinic} from '../model/adminClinic';\r\nimport {UserServiceService} from './user-service.service';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {Patient} from '../model/patient';\r\nimport {AdminClinicStatus} from '../model/adminClinicStatus';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminClinicService {\r\n\r\n  urlAdminClinic = environment.baseUrl + environment.adminClinic;\r\n  listAdminClinic: Array<AdminClinic> = new Array<AdminClinic>();\r\n  adminClinic: AdminClinic;\r\n  editAC: AdminClinic;\r\n  adminClinicsWithClinicId: Array<AdminClinic> = new Array<AdminClinic>();\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserServiceService\r\n  ) {\r\n    this.getAllClinicAdmins();\r\n  }\r\n\r\n  public loginAdminClinic(adminClinic) {\r\n    this.userService.setToken(adminClinic);\r\n    return this.http.post(environment.baseUrl + '/login', adminClinic, {responseType: 'text'});\r\n  }\r\n\r\n  public editAdminClinic(adminClinic) {\r\n    return this.http.post(this.urlAdminClinic + '/edit', adminClinic, {responseType: 'text'});\r\n  }\r\n\r\n  public getAdminClinic(email: string) {\r\n    if ( this.listAdminClinic.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listAdminClinic) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public setAdminClinic(ac: AdminClinic) {\r\n    for (const ac1 of this.listAdminClinic) {\r\n      if (ac1.email === ac.email) {\r\n        ac1.password = ac.password;\r\n        ac1.name = ac.name;\r\n        ac1.surname = ac.surname;\r\n        ac1. number = ac.number;\r\n      }\r\n    }\r\n  }\r\n\r\n  public addClinicAdmin(a: AdminClinic) {\r\n    if (this.getAdminClinic(a.email) === null) {\r\n      this.listAdminClinic.push(a);\r\n    }\r\n  }\r\n\r\n  public whichStatus(status: string) {\r\n    if (status === 'ACTIVE') {\r\n      return AdminClinicStatus.ACTIVE;\r\n    } else {\r\n      return  AdminClinicStatus.DELETED;\r\n    }\r\n  }\r\n\r\n  public getAllClinicAdmins(): Array<AdminClinic> {\r\n    this.http.get(this.urlAdminClinic + '/all').subscribe((data: AdminClinic[]) => {\r\n        for (const c of data) {\r\n          this.adminClinic = new AdminClinic(c.email, c.password, c.name, c.surname, c.number, c.clinic, this.whichStatus(c.status.toString()));\r\n          this.addClinicAdmin(this.adminClinic);\r\n          console.log(c);\r\n          console.log('Ispod admin klinike');\r\n          console.log(this.adminClinic);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listAdminClinic;\r\n  }\r\n\r\n  public newAdminClinic(adminClinic) {\r\n    return this.http.post(this.urlAdminClinic + '/clinical-centre-admin/addAdmins', adminClinic);\r\n  }\r\n\r\n  public addAdminClinic(ac: AdminClinic) {\r\n    if (this.getAdminClinic(ac.email) === null) {\r\n      this.listAdminClinic.push(ac);\r\n    }\r\n  }\r\n\r\n  public getAdminClinicsWithClinicId(id: string): AdminClinic[] {\r\n    let params = new HttpParams();\r\n    params = params.append('id', id);\r\n    this.http.get(this.urlAdminClinic + '/adminClinicsWithClinicId', {params}).subscribe((data: AdminClinic[]) => {\r\n          this.adminClinicsWithClinicId = data;\r\n          console.log('Admin clinic get ispod');\r\n          console.log(this.adminClinicsWithClinicId);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.adminClinicsWithClinicId;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {Clinic} from '../model/clinic';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {Patient} from '../model/patient';\r\nimport {ExaminationsTypeService} from './examination-type.service';\r\nimport {ExaminationType} from '../model/examinationType';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClinicService {\r\n\r\n  urlClinic = environment.baseUrl + environment.clinic;\r\n  listClinics: Array<Clinic> = new Array<Clinic>();\r\n  clinic: Clinic;\r\n  clinicsTypes: Array<Clinic> = new Array<Clinic>();\r\n  type: string;\r\n  clinicForExamination: Clinic;\r\n  examinationTypes: Array<ExaminationType> = new Array<ExaminationType>();\r\n  constructor( private http: HttpClient, private examinationTypeService: ExaminationsTypeService) {\r\n    this.examinationTypes = examinationTypeService.getAllTypes();\r\n    this.getAllClinics();\r\n  }\r\n\r\n  public addClinic(c: Clinic) {\r\n    if (this.getClinic(c.name) === null) {\r\n      this.listClinics.push(c);\r\n    }\r\n  }\r\n\r\n  public getClinic(name: string) {\r\n    if ( this.listClinics.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listClinics) {\r\n      if ( u.name === name) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getClinicByName(name) {\r\n    return this.http.get(this.urlClinic + '/' + name);\r\n  }\r\n\r\n  public getAllClinics(): Array<Clinic> {\r\n    this.http.get(this.urlClinic + '/all').subscribe((data: Clinic[]) => {\r\n      for (const c of data) {\r\n        this.clinic = new Clinic(c.name, c.address, c.description, c.doctors , c.types, c.clinicRating, c.id);\r\n        this.addClinic(this.clinic);\r\n      }\r\n    },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.listClinics;\r\n  }\r\n\r\n  public newClinic(clinic) {\r\n    return this.http.post(this.urlClinic + '/clinical-centre-admin/addClinic', clinic);\r\n  }\r\n  public getClinicsWithType(type: string, date: string): Array<Clinic> {\r\n\r\n    let params = new HttpParams();\r\n    params = params.append('type', type);\r\n    params = params.append('date', date);\r\n    this.clinicsTypes = new Array<Clinic>();\r\n    this.http.get(this.urlClinic + '/allWithTypes', {params}).subscribe((data: Clinic[]) => {\r\n        for (const c of data) {\r\n          this.clinic = new Clinic(c.name, c.address, c.description, c.doctors , c.types, c.clinicRating, c.id);\r\n          this.clinicsTypes.push(this.clinic);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.clinicsTypes;\r\n  }\r\n\r\n  public getClinicsWithTypes() {\r\n    return this.clinicsTypes;\r\n  }\r\n\r\n  public setType(type: string) {\r\n    this.type = type;\r\n  }\r\n\r\n  public getType() {\r\n    return this.type;\r\n  }\r\n\r\n  public setClinicForExamination(clinic: Clinic) {\r\n    this.clinicForExamination = clinic;\r\n  }\r\n\r\n  public getClinicForExamination() {\r\n    return this.clinicForExamination;\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {ClinicalCentreAdministrator} from '../model/ClinicalCentreAdministrator';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {UserServiceService} from './user-service.service';\r\nimport {Doctor} from '../model/doctor';\r\nimport {Patient} from '../model/patient';\r\nimport {PatientStatus} from '../model/patientStatus';\r\nimport {PatientService} from './patient.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClinicalCentreAdministratorService {\r\n\r\n  urlAdmin = environment.baseUrl + environment.ClinicalCentreAdministrator;\r\n  listAdmins: Array<ClinicalCentreAdministrator> = new Array<ClinicalCentreAdministrator>();\r\n  clinicalCentreAdministrator: ClinicalCentreAdministrator;\r\n  editD: ClinicalCentreAdministrator;\r\n  tmp: Array<Patient>;\r\n  patient: Patient;\r\n  constructor(\r\n          private http: HttpClient,\r\n          private userService: UserServiceService,\r\n          private patientService: PatientService) {\r\n    this.clinicalCentreAdministrator = new ClinicalCentreAdministrator('zejak@email.com', 'Zejake123', 'Nikola', 'Zejak', '789456321');\r\n    this.listAdmins.push(this.clinicalCentreAdministrator);\r\n  }\r\n\r\n  public loginAdmin(clinicalCentreAdministrator) {\r\n    this.userService.setToken(clinicalCentreAdministrator);\r\n    return this.http.post(environment.baseUrl + '/login', clinicalCentreAdministrator, {responseType: 'text'});\r\n  }\r\n  public editAdmin(clinicalCentreAdministrator) {\r\n    return this.http.post(this.urlAdmin + '/edit', clinicalCentreAdministrator , {responseType: 'text'});\r\n  }\r\n\r\n  public getAdmin(email: string) {\r\n    if ( this.listAdmins.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listAdmins) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public setAdmin(d: ClinicalCentreAdministrator) {\r\n    for (const d1 of this.listAdmins) {\r\n      if (d1.email === d.email) {\r\n        d1.password = d.password;\r\n        d1.name = d.name;\r\n        d1.surname = d.surname;\r\n        d1. number = d.number;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getAllRequests(): Array<Patient> {\r\n    this.http.get(this.urlAdmin + '/requests').subscribe((data: Patient[]) => {\r\n        this.tmp = new Array<Patient>();\r\n        for (const c of data) {\r\n          if (this.patientService.whichStatus(c.status.toString()) === PatientStatus.AWAITING_APPROVAL) {\r\n            this.patient = new Patient(c.email, c.password, c.name, c.surname, c.number, c.address, c.city, c.country, c.insuranceID, this.patientService.whichStatus(c.status.toString()));\r\n            this.tmp.push(this.patient);\r\n          }\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.tmp;\r\n  }\r\n\r\n\r\n\r\n  }\r\n","import { Injectable } from '@angular/core';\r\nimport {Diagnose} from '../model/Diagnose';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {environment} from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DiagnoseService {\r\n\r\n  url = environment.baseUrl + environment.diagnose;\r\n  diagnose: Diagnose;\r\n  diagnose1: Diagnose;\r\n  listDiagnoses: Array<Diagnose> = new Array<Diagnose>();\r\n\r\n  constructor(private http: HttpClient\r\n  ) {\r\n\r\n    this.getAllDiagnoses();\r\n  }\r\n\r\n  public editDiagnose(diagnose) {\r\n    return this.http.post(this.url + '/edit', diagnose, {responseType: 'text'});\r\n  }\r\n\r\n  public getDiagnose(id: number) {\r\n    if ( this.listDiagnoses.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listDiagnoses) {\r\n      if ( u.id === id) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public setDiagnose(d: Diagnose) {\r\n    for (const diag of this.listDiagnoses) {\r\n      if (diag.id === d.id) {\r\n        diag.title = d.title;\r\n        diag.description = d.description;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public addDiagnose(d: Diagnose) {\r\n    if (this.getDiagnose(d.id) === null) {\r\n      this.listDiagnoses.push(d);\r\n    }\r\n  }\r\n\r\n  public newDiagnose(diagnose) {\r\n    return this.http.post(this.url + '/clinical-centre-admin/addDiagnose', diagnose);\r\n  }\r\n\r\n  public getAllDiagnoses(): Array<Diagnose> {\r\n    this.http.get(this.url + '/all').subscribe((data: Diagnose[]) => {\r\n        for (const c of data) {\r\n          this.diagnose1 = new Diagnose(c.id, c.title, c.description);\r\n          this.addDiagnose(this.diagnose1);\r\n          console.log(c);\r\n          console.log('Ispod admin klinike');\r\n          console.log(this.diagnose1);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listDiagnoses;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {Doctor} from '../model/doctor';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {UserServiceService} from './user-service.service';\r\nimport {Clinic} from '../model/clinic';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DoctorService {\r\n\r\n  urlDoctor = environment.baseUrl + environment.doctor;\r\n  listDoctors: Array<Doctor> = new Array<Doctor>();\r\n  doctor: Doctor;\r\n  editD: Doctor;\r\n  doctorss: Array<Doctor> = new Array<Doctor>();\r\n  termins: Array<string> = new Array<string>();\r\n  doctorsWithSearch: Array<Doctor> = new Array<Doctor>();\r\n  termin: string;\r\n  date: string;\r\n  doctorForMake: Doctor;\r\n  intervals: Array<string[]> = new Array<string[]>();\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserServiceService\r\n  ) {\r\n    this.getAllDoctors();\r\n  }\r\n\r\n  public loginDoctor(doctor) {\r\n    this.userService.setToken(doctor);\r\n    return this.http.post(environment.baseUrl + '/login', doctor, {responseType: 'text'});\r\n  }\r\n\r\n  public editDoctor(doctor) {\r\n    return this.http.post(this.urlDoctor + '/edit', doctor, {responseType: 'text'});\r\n  }\r\n\r\n  public getDoctor(email: string) {\r\n    if ( this.listDoctors.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listDoctors) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public addDoctor(d: Doctor) {\r\n    if (this.getDoctor(d.email) === null) {\r\n      this.listDoctors.push(d);\r\n    }\r\n  }\r\n\r\n  public setDoctor(d: Doctor) {\r\n    for (const d1 of this.listDoctors) {\r\n      if (d1.email === d.email) {\r\n        d1.password = d.password;\r\n        d1.name = d.name;\r\n        d1.surname = d.surname;\r\n        d1.phone = d.phone;\r\n        d1.workHoursFrom = d.workHoursFrom;\r\n        d1.workHoursTo = d.workHoursTo;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getAllDoctors(): Array<Doctor> {\r\n    this.http.get(this.urlDoctor + '/all').subscribe((data: Doctor[]) => {\r\n        for (const c of data) {\r\n          this.doctor = new Doctor(c.email, c.password, c.name, c.surname, c.phone, c.workHoursFrom, c.workHoursTo, c.specialized, c.doctorRating, c.clinic);\r\n          this.addDoctor(this.doctor);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.listDoctors;\r\n  }\r\n\r\n  public getDoctorsTermins(date: string, email: string): Array<string> {\r\n    let params = new HttpParams();\r\n    params = params.append('date', date);\r\n    params = params.append('email', email);\r\n    console.log(params)\r\n    this.http.get(this.urlDoctor + '/terminString', {params}).subscribe((data: string[]) => {\r\n        this.termins = new Array<string>();\r\n        console.log('Ispod ovde');\r\n        console.log(data);\r\n        this.termins = data;\r\n        this.intervals.push(this.termins);\r\n\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.termins;\r\n  }\r\n\r\n  public getDoctorss() {\r\n    return this.doctorss;\r\n  }\r\n\r\n  public setDoctorss(doctorss: Array<Doctor>) {\r\n    this.doctorss = doctorss;\r\n  }\r\n\r\n  public getDoctrosWithSearch(name: string, surname: string, rating: string): Array<Doctor> {\r\n\r\n    let params = new HttpParams();\r\n    params = params.append('name', name);\r\n    params = params.append('surname', surname);\r\n    params = params.append('rating', rating);\r\n    this.doctorsWithSearch = new Array<Doctor>();\r\n    this.http.get(this.urlDoctor + '/allWithSearch', {params}).subscribe((data: Doctor[]) => {\r\n        console.log(data)\r\n        for (const c of data) {\r\n          this.doctor = new Doctor(c.email, c.password, c.name, c.surname, c.phone, c.workHoursFrom, c.workHoursTo,\r\n            c.specialized, c.doctorRating, c.clinic);\r\n          this.doctorsWithSearch.push(this.doctor);\r\n          console.log(this.doctor);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n      );\r\n\r\n    return this.doctorsWithSearch;\r\n  }\r\n\r\n  public setExaminationsInterval(intervals: Array<string[]>) {\r\n    this.intervals = intervals;\r\n    console.log('ISPOD INTERVALI');\r\n    console.log(this.intervals);\r\n  }\r\n\r\n  public getExaminationsInterval() {\r\n    return this.intervals;\r\n  }\r\n\r\n  public setDate(date) {\r\n    this.date = date;\r\n  }\r\n\r\n  public getDate() {\r\n    return this.date;\r\n  }\r\n\r\n  public setDoctorForMake(doctor: Doctor) {\r\n    this.doctorForMake = doctor;\r\n  }\r\n\r\n  public getDoctorForMake() {\r\n    return this.doctorForMake;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {ExaminationType} from '../model/examinationType';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {environment} from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExaminationsTypeService {\r\n\r\n  urlExaminationType = environment.baseUrl + environment.examinationType;\r\n  examinationTypes: Array<ExaminationType> = new Array<ExaminationType>();\r\n  type: ExaminationType;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public getAllTypes(): Array<ExaminationType> {\r\n    this.http.get(this.urlExaminationType + '/all').subscribe((data: ExaminationType[]) => {\r\n        for (const c of data) {\r\n          this.type = new ExaminationType(c.label, c.price);\r\n          this.addType(this.type);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.examinationTypes);\r\n    return this.examinationTypes;\r\n  }\r\n\r\n  public addType(t: ExaminationType) {\r\n    if (this.getType(t.label) === null) {\r\n      this.examinationTypes.push(t);\r\n    }\r\n  }\r\n\r\n  public getType(name: string) {\r\n    if ( this.examinationTypes.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.examinationTypes) {\r\n      if ( u.label === name) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {Examination} from '../model/examination';\r\nimport {ExaminationKind} from '../model/examinationKind';\r\nimport {ExaminationStatus} from '../model/examinationStatus';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {ExaminationType} from '../model/examinationType';\r\nimport {ExaminationReport} from '../model/examinationReport';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExaminationService {\r\n\r\n  url = environment.baseUrl + environment.examination;\r\n  listExaminations: Array<Examination> = new Array<Examination>();\r\n  examination: Examination;\r\n  examinationDoctor: Examination;\r\n  examinationForDoctor: Array<Examination> = new Array<Examination>();\r\n  examinationReport: ExaminationReport;\r\n  predefExaminations: Array<Examination> = new Array<Examination>();\r\n  etype: ExaminationType;\r\n  MHFP: Array<Examination> = new Array<Examination>();\r\n  tmp: Array<Examination> = new Array<Examination>();\r\n  flag: boolean;\r\n  examinationForRating: Examination;\r\n  constructor(\r\n    private http: HttpClient,\r\n  ) {\r\n    this.getAllExaminations();\r\n  }\r\n\r\n  public whichKindExamination(kind: string) {\r\n    if (kind === 'EXAMINATION') {\r\n      return ExaminationKind.EXAMINATION;\r\n    } else {\r\n      return ExaminationKind.OPERATION;\r\n    }\r\n  }\r\n\r\n  public whichStatusExamination(status: string) {\r\n    if (status === 'APPROVED') {\r\n      return ExaminationStatus.APPROVED;\r\n    } else if (status === 'AWAITING') {\r\n      return ExaminationStatus.AWAITING;\r\n    } else if (status === 'PREDEF_BOOKED') {\r\n      return  ExaminationStatus.PREDEF_BOOKED;\r\n    } else {\r\n      return ExaminationStatus.PREDEF_AVAILABLE;\r\n    }\r\n  }\r\n\r\n  public getAllExaminations(): Array<Examination> {\r\n    this.http.get(this.url + '/all').subscribe((data: Examination[]) => {\r\n        this.listExaminations = new Array<Examination>();\r\n        for (const c of data) {\r\n          this.examination =  new Examination(this.whichKindExamination(c.kind.toString()), this.whichStatusExamination(c.status.toString()), c.examinationType, c.discount, c.doctorRating, c.clinicRating, c.nurse, c.clinic, c.patient, c.doctors, c.id, c.interval);\r\n          this.listExaminations.push(this.examination);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.listExaminations);\r\n    return this.listExaminations;\r\n  }\r\n\r\n  public addExamination(e: Examination) {\r\n    if (this.getExamination(e.id) === null) {\r\n      this.listExaminations.push(e);\r\n    }\r\n  }\r\n  public getExamination(id: number) {\r\n    if ( this.listExaminations.length === 0) {\r\n      return null;\r\n    }\r\n    for (const e of this.listExaminations) {\r\n      if (e.id === id) {\r\n        return e;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getAllPredefExaminations(): Array<Examination> {\r\n    this.http.get(this.url + '/allPredefExaminations').subscribe((data: Examination[]) => {\r\n        console.log('data ispod');\r\n        console.log(data);\r\n        this.predefExaminations = new Array<Examination>();\r\n        for (const c of data) {\r\n          this.examination =  new Examination(this.whichKindExamination(c.kind.toString()), this.whichStatusExamination(c.status.toString()), c.examinationType, c.discount, c.doctorRating, c.clinicRating, c.nurse, c.clinic, c.patient, c.doctors, c.id, c.interval);\r\n          this.predefExaminations.push(this.examination);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.predefExaminations);\r\n    return this.predefExaminations;\r\n  }\r\n\r\n  public getMHforP(email: string): Array<Examination> {\r\n    let params = new HttpParams();\r\n    params = params.append('email', email);\r\n    this.tmp = new Array<Examination>();\r\n    this.http.get(this.url + '/getMHforP', {params}).subscribe((data: Examination[]) => {\r\n        for (const c of data) {\r\n          this.examination =  new Examination(this.whichKindExamination(c.kind.toString()), this.whichStatusExamination(c.status.toString()), c.examinationType, c.discount, c.doctorRating, c.clinicRating, c.nurse, c.clinic, c.patient, c.doctors, c.id, c.interval);\r\n          this.tmp.push(this.examination);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    this.MHFP = this.tmp;\r\n    return this.MHFP;\r\n  }\r\n\r\n  public setMHFP(examinations: Array<Examination>) {\r\n    this.MHFP = examinations;\r\n  }\r\n\r\n  public getMHFP() {\r\n    return this.MHFP;\r\n  }\r\n\r\n  public makePredefExamination(id: string, email: string) {\r\n    let params = new HttpParams();\r\n    params = params.append('id', id);\r\n    params = params.append('email', email);\r\n    return this.http.post(this.url + '/makePredefExamination', params);\r\n  }\r\n\r\n  public makeExamination(date: string, patientEmail: string, doctorEmail: string, type: string, clinicId: string, kind: string, adminsClinic: string) {\r\n    let params = new HttpParams();\r\n    params = params.append('date', date);\r\n    params = params.append('patientEmail', patientEmail);\r\n    params = params.append('doctorEmail', doctorEmail);\r\n    params = params.append('type', type);\r\n    params = params.append('clinicId', clinicId);\r\n    params = params.append('kind', kind);\r\n    params = params.append('adminsClinic', adminsClinic);\r\n    return this.http.post(this.url + '/addExaminationPatient', params);\r\n  }\r\n\r\n  public getExaminationsForDoctor(email: string): Array<Examination> {\r\n\r\n    let params = new HttpParams();\r\n    params = params.append('email', email);\r\n    this.examinationForDoctor = new Array<Examination>();\r\n    this.http.get(this.url + '/allExaminationsForDoctor', {params}).subscribe((data: Examination[]) => {\r\n        for (const c of data) {\r\n          this.examinationDoctor =  new Examination(this.whichKindExamination(c.kind.toString()), this.whichStatusExamination(c.status.toString()), c.examinationType, c.discount, c.doctorRating, c.clinicRating, c.nurse, c.clinic, c.patient, c.doctors, c.id, c.interval);\r\n          this.examinationForDoctor.push(this.examinationDoctor);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log('Ispod');\r\n    console.log(this.examinationForDoctor);\r\n    return this.examinationForDoctor;\r\n  }\r\n\r\n  public getPatientForDoctors() {\r\n    return this.examinationForDoctor;\r\n  }\r\n\r\n  public async getFlagForRate(id: string): Promise<boolean> {\r\n    let params = new HttpParams();\r\n    params = params.append('id', id);\r\n    this.flag = false;\r\n\r\n    const response: any = await this.http.get(this.url + '/getFlagForRate', {params}).toPromise();\r\n    return response;\r\n  }\r\n\r\n  public setExaminationForRating(examination) {\r\n    this.examinationForRating = examination;\r\n  }\r\n\r\n  public getExaminationForRating() {\r\n    return this.examinationForRating;\r\n  }\r\n\r\n  public RateDoctorAndClinic(examinationId: string, doctorRating: string, clinicRating: string) {\r\n    let params = new HttpParams();\r\n    params = params.append('examinationId', examinationId);\r\n    params = params.append('doctorRating', doctorRating);\r\n    params = params.append('clinicRating', clinicRating);\r\n\r\n    return this.http.post(this.url + '/rateDoctorAndClinic', params);\r\n\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {Examination} from '../model/examination';\r\nimport {MedicalRecord} from '../model/medicalRecord';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {ExaminationReport} from '../model/examinationReport';\r\nimport {Nurse} from '../model/nurse';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MedicalRecordService {\r\n\r\n  url = environment.baseUrl + environment.medicalRecord;\r\n  listMedicalRecord: Array<MedicalRecord> = new Array<MedicalRecord>();\r\n  medicalRecord: MedicalRecord;\r\n  examiantionReport: ExaminationReport;\r\n  MRFP: MedicalRecord;\r\n  medicalRecordForPatient: MedicalRecord;\r\n  medicalRecordForDialog: MedicalRecord;\r\n  dialogDate = false;\r\n  listExaminationReport: Array<ExaminationReport> = new Array<ExaminationReport>();\r\n  examinationRepForP: ExaminationReport\r\n\r\n  constructor(private http: HttpClient,) {\r\n    this.getAllMedicalRecords();\r\n  }\r\n\r\n  public addMedicalRecord(mr: MedicalRecord) {\r\n    if (this.getMedicalRecord(mr.id) === null) {\r\n      this.listMedicalRecord.push(mr);\r\n    }\r\n  }\r\n\r\n  public getAllMedicalRecords(): Array<MedicalRecord> {\r\n    this.http.get(this.url + '/all').subscribe((data: MedicalRecord[]) => {\r\n        this.listMedicalRecord = new Array<MedicalRecord>();\r\n        for (const c of data) {\r\n          // Ostalo je da se doda examinaton_report u konstruktoru\r\n          console.log('Ispod data za medial rekod');\r\n          console.log(c);\r\n          this.medicalRecord = new MedicalRecord(c.id, c.height, c.weight, c.bloodType, c.allergies, c.patient, c.examinationReports);\r\n          this.listMedicalRecord.push(this.medicalRecord);\r\n          console.log(this.medicalRecord);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.listMedicalRecord);\r\n    return this.listMedicalRecord;\r\n  }\r\n\r\n  public getMRforP(email: string): MedicalRecord {\r\n    let params = new HttpParams();\r\n    params = params.append('email', email);\r\n    this.http.get(this.url + '/mrForP', {params}).subscribe((data: MedicalRecord) => {\r\n        this.MRFP = data;\r\n        console.log(this.MRFP);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.MRFP;\r\n\r\n  }\r\n\r\n  public getMRFP() {\r\n    return this.MRFP;\r\n  }\r\n\r\n  public setMRFP(medicalRecord: MedicalRecord) {\r\n    this.MRFP = medicalRecord;\r\n  }\r\n\r\n  public getMedicalRecord(id: number) {\r\n    if (this.listMedicalRecord.length === 0) {\r\n      return null;\r\n    }\r\n    for (const e of this.listMedicalRecord) {\r\n      if (e.id === id) {\r\n        return e;\r\n      }\r\n    }\r\n  }\r\n\r\n  public editMedicalRecord(medicalRecord) {\r\n    return this.http.post(this.url + '/edit', medicalRecord, {responseType: 'text'});\r\n  }\r\n\r\n  public setExaminationReport(p: ExaminationReport) {\r\n    for (const p1 of this.listExaminationReport) {\r\n      if (p1.id === p.id) {\r\n        p1.comment = p.comment;\r\n      }\r\n    }\r\n  }\r\n\r\n  public setMedicalRecord(p: MedicalRecord) {\r\n\r\n    for (const p1 of this.listMedicalRecord) {\r\n      if (p1.id === p.id) {\r\n        p1.weight = p.weight;\r\n        p1.bloodType = p.bloodType;\r\n        p1.allergies = p.allergies;\r\n        p1.examinationReports = p.examinationReports;\r\n        p1.height = p.height;\r\n        p1.patient = p.patient;\r\n        p1.examinationReports = p.examinationReports;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getMedicalRecordForPatient(email: string): MedicalRecord {\r\n\r\n    let params = new HttpParams();\r\n    params = params.append('email', email);\r\n    this.http.get(this.url + '/MedicalRecordForPatient', {params}).subscribe((data: MedicalRecord) => {\r\n        console.log('MEDICAL RECORD DATA ISPOD');\r\n        console.log(data);\r\n        this.medicalRecordForPatient = new MedicalRecord(data.id, data.height, data.weight, data.bloodType, data.allergies, data.patient, data.examinationReports);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log('Ispod');\r\n    console.log(this.medicalRecordForPatient);\r\n    return this.medicalRecordForPatient;\r\n  }\r\n\r\n  public setMedicalRecordForDialog(medicalRecord) {\r\n    console.log('medicalRecord');\r\n    this.medicalRecordForDialog = medicalRecord;\r\n  }\r\n\r\n  public getMedicalRecordForDialog() {\r\n    return this.medicalRecordForDialog;\r\n  }\r\n\r\n  public getLocalDateAndTime(interval: string, interval1: string): boolean {\r\n\r\n    let params = new HttpParams();\r\n    params = params.append('interval', interval);\r\n    params = params.append('interval1', interval1);\r\n\r\n    this.http.get(this.url + '/DateAndTime', {params}).subscribe((data: boolean) => {\r\n        this.dialogDate = data;\r\n        console.log('localDateAndTime');\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      });\r\n    return this.dialogDate;\r\n  }\r\n\r\n  public setExaminationReportForPatient(examinationReport) {\r\n    console.log('medicalRecord');\r\n    this.examinationRepForP = examinationReport;\r\n  }\r\n\r\n  public getExaminationReportForPatient() {\r\n    return this.examinationRepForP;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {Nurse} from '../model/nurse';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {UserServiceService} from './user-service.service';\r\nimport {environment} from '../../environments/environment';\r\nimport {Medicaments} from '../model/Medicaments';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MedicamentsService {\r\n\r\n  url = environment.baseUrl + environment.medicaments\r\n  listMedicaments: Array<Medicaments> = new Array<Medicaments>();\r\n  medicaments: Medicaments;\r\n\r\n  constructor(\r\n    private http: HttpClient) {\r\n\r\n    this.getAllMedicaments();\r\n  }\r\n\r\n  public editMedicament(medicament) {\r\n    return this.http.post(this.url + '/edit', medicament, {responseType: 'text'});\r\n  }\r\n\r\n  public newMedicament(medicament) {\r\n    return this.http.post(this.url + '/clinical-centre-admin/addMedicament', medicament);\r\n  }\r\n\r\n\r\n  public getMedicament(id: number) {\r\n    if ( this.listMedicaments.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listMedicaments) {\r\n      if ( u.id === id) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public setMedicament(p: Medicaments) {\r\n\r\n    for (const p1 of this.listMedicaments) {\r\n      if (p1.id === p.id) {\r\n        p1.title = p.title;\r\n        p1.description = p.description;\r\n        p1.strenght = p.strenght;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public addMedicament(n: Medicaments) {\r\n    if (this.getMedicament(n.id) === null) {\r\n      this.listMedicaments.push(n);\r\n    }\r\n  }\r\n\r\n  public getAllMedicaments(): Array<Medicaments> {\r\n    this.http.get(this.url + '/getAllMedicaments').subscribe((data: Medicaments[]) => {\r\n        for (const c of data) {\r\n          this.medicaments = new Medicaments(c.id, c.title, c.description, c.strenght);\r\n          this.addMedicament(this.medicaments);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listMedicaments;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {UserServiceService} from './user-service.service';\r\nimport {Nurse} from '../model/nurse';\r\nimport {Patient} from '../model/patient';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NurseServiceService {\r\n\r\n  urlNurse = environment.baseUrl + environment.nurse;\r\n  listNurses: Array<Nurse> = new Array<Nurse>();\r\n\r\n  nurse: Nurse;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserServiceService) {\r\n\r\n    this.getAllNurses();\r\n  }\r\n\r\n  public loginNurse(nurse) {\r\n    this.userService.setToken(nurse);\r\n    return this.http.post(environment.baseUrl + '/login', nurse, {responseType: 'text'});\r\n  }\r\n\r\n  public editNurse(nurse) {\r\n    return this.http.post(this.urlNurse + '/edit', nurse, {responseType: 'text'});\r\n  }\r\n\r\n  public getNurse(email: string) {\r\n    if ( this.listNurses.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listNurses) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public setNurse(p: Nurse) {\r\n\r\n    for (const p1 of this.listNurses) {\r\n      if (p1.email === p.email) {\r\n        p1.name = p.name;\r\n        p1.phone = p.phone;\r\n        p1.surname = p.surname;\r\n        p1.workHoursTo = p.workHoursTo;\r\n        p1.workHoursFrom = p.workHoursFrom;\r\n        p1.password = p.password;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public addNurse(n: Nurse) {\r\n    if (this.getNurse(n.email) === null) {\r\n      this.listNurses.push(n);\r\n    }\r\n  }\r\n\r\n  public getAllNurses(): Array<Nurse> {\r\n    this.http.get(this.urlNurse + '/all').subscribe((data: Nurse[]) => {\r\n        for (const c of data) {\r\n          this.nurse = new Nurse(c.email, c.password, c.name, c.surname, c.phone, c.workHoursTo, c.workHoursFrom);\r\n          this.addNurse(this.nurse);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listNurses;\r\n  }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {environment} from '../../environments/environment';\r\nimport {Patient} from '../model/patient';\r\nimport {UserServiceService} from './user-service.service';\r\nimport {PatientStatus} from '../model/patientStatus';\r\nimport {Examination} from '../model/examination';\r\nimport {ExaminationKind} from '../model/examinationKind';\r\nimport {ExaminationStatus} from '../model/examinationStatus';\r\nimport {Clinic} from '../model/clinic';\r\nimport {Doctor} from '../model/doctor';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PatientService {\r\n\r\n  urlPatient = environment.baseUrl + environment.patient;\r\n  listPatients: Array<Patient> = new Array<Patient>();\r\n  patientWithDoctor: Array<Patient> = new Array<Patient>();\r\n  patients: Array<Patient> = new Array<Patient>();\r\n  patient: Patient;\r\n  patient1: Patient;\r\n  editP: Patient;\r\n  tmp: Array<Patient>;\r\n  listExaminations: Array<Examination>;\r\n  examination: Examination;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserServiceService\r\n  ) {\r\n    this.getAllPatients();\r\n    this.getAllRequests();\r\n  }\r\n\r\n  public newPatient(patient) {\r\n    return this.http.post(this.urlPatient + '/register', patient);\r\n  }\r\n\r\n  public loginPatient(patient) {\r\n    this.userService.setToken(patient);\r\n    return this.http.post(environment.baseUrl + '/login', patient, {responseType: 'text'});\r\n  }\r\n\r\n  public activatePatient(id: number) {\r\n\r\n    const headers = new HttpHeaders({'Content-Type': 'application/json'});\r\n\r\n    return this.http.put(this.urlPatient + '/activatePatient', id, {headers});\r\n  }\r\n\r\n  public editPatient(patient) {\r\n    return this.http.post(this.urlPatient + '/edit', patient, {responseType: 'text'});\r\n  }\r\n\r\n  public addPatient(p: Patient) {\r\n    if (this.getPatient(p.email) === null) {\r\n      this.listPatients.push(p);\r\n    }\r\n  }\r\n\r\n  public getPatient(email: string) {\r\n    if ( this.listPatients.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listPatients) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public setPatient(p: Patient) {\r\n\r\n    for (const p1 of this.listPatients) {\r\n      if (p1.email === p.email) {\r\n        p1.name = p.name;\r\n        p1.number = p.number;\r\n        p1.country = p.country;\r\n        p1.address = p.address;\r\n        p1.surname = p.surname;\r\n        p1.city = p.city;\r\n        p1.password = p.password;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public whichStatus(status: string) {\r\n    if (status === 'AWAITING_APPROVAL') {\r\n      return PatientStatus.AWAITING_APPROVAL;\r\n    } else if (status === 'APPROVED') {\r\n      return PatientStatus.APPROVED;\r\n    } else {\r\n      return PatientStatus.ACTIVATED;\r\n    }\r\n\r\n\r\n  }\r\n\r\n  public getAllPatients(): Array<Patient> {\r\n    this.http.get(this.urlPatient + '/all').subscribe((data: Patient[]) => {\r\n        for (const c of data) {\r\n          this.patient = new Patient(c.email, c.password, c.name, c.surname, c.number, c.address, c.city, c.country, c.insuranceID, this.whichStatus(c.status.toString()));\r\n          this.addPatient(this.patient);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listPatients;\r\n  }\r\n\r\n  public getAllRequests(): Array<Patient> {\r\n    this.http.get(this.urlPatient + '/requests').subscribe((data: Patient[]) => {\r\n        this.tmp = new Array<Patient>();\r\n        for (const c of data) {\r\n            this.patient = new Patient(c.email, c.password, c.name, c.surname, c.number, c.address, c.city, c.country, c.insuranceID, PatientStatus.AWAITING_APPROVAL);\r\n            this.tmp.push(this.patient);\r\n            console.log(this.patient);\r\n          }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.tmp);\r\n    return this.tmp;\r\n  }\r\n\r\n  public getPatientsForDoctor(email: string): Array<Patient> {\r\n\r\n    let params = new HttpParams();\r\n    params = params.append('email', email);\r\n    this.patientWithDoctor = new Array<Patient>();\r\n    this.http.get(this.urlPatient + '/allPatientsForDoctor', {params}).subscribe((data: Patient[]) => {\r\n        for (const c of data) {\r\n          this.patient = new Patient(c.email, c.password, c.name, c.surname, c.number, c.address, c.city, c.country , c.insuranceID, c.status);\r\n          this.patientWithDoctor.push(this.patient);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log('Ispod');\r\n    console.log(this.patientWithDoctor);\r\n    return this.patientWithDoctor;\r\n  }\r\n\r\n  public getPatientForDoctors() {\r\n    return this.patientWithDoctor;\r\n  }\r\n\r\n  public getPatient1() {\r\n    return this.patient1;\r\n  }\r\n\r\n  public setPatient1(pat: Patient) {\r\n    console.log('setPatient');\r\n    this.patient1 = pat;\r\n  }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {User} from '../model/user';\r\nimport {Role} from '../model/role';\r\nimport {Router} from '@angular/router';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {environment} from '../../environments/environment';\r\nimport {Clinic} from '../model/clinic';\r\n\r\nexport const TOKEN = 'LoggedInUser';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserServiceService {\r\n\r\n  list: Array<User> = new Array<User>();\r\n  u: User;\r\n  urlUser = environment.baseUrl + environment.user;\r\n  user: User = new User('', '', Role.NONE);\r\n  constructor(private router: Router, private http: HttpClient) {\r\n    this.getAllUsers();\r\n    localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n  }\r\n\r\n  public addUser(u: User) {\r\n    if (this.getUser(u.email) === null) {\r\n      this.list.push(u);\r\n    }\r\n  }\r\n\r\n  public getUser(email: string) {\r\n    if ( this.list.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.list) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public setUser(u: User) {\r\n\r\n    for (const p1 of this.list) {\r\n      if (p1.email === u.email) {\r\n        p1.password = u.password;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public setToken(user) {\r\n    localStorage.setItem(TOKEN, JSON.stringify(user));\r\n    this.user = user;\r\n  }\r\n\r\n  public isLoggedIn() {\r\n    if (localStorage.getItem(TOKEN) !== null) {\r\n      return localStorage.getItem(TOKEN);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public logOut() {\r\n    this.router.navigate(['']);\r\n    this.user =  new User('', '', Role.NONE);\r\n    localStorage.removeItem(TOKEN);\r\n    localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n  }\r\n\r\n  public isPatient() {\r\n    if (this.isLoggedIn()) {\r\n      return this.user.role === Role.PATIENT;\r\n    }\r\n  }\r\n\r\n  public isDoctor() {\r\n    if (this.isLoggedIn()) {\r\n      return this.user.role === Role.DOCTOR;\r\n    }\r\n  }\r\n\r\n  public isNurse() {\r\n    if (this.isLoggedIn()) {\r\n      return this.user.role === Role.NURSE;\r\n    }\r\n  }\r\n\r\n  public isClinicalAdmin() {\r\n    if (this.isLoggedIn()) {\r\n      return this.user.role === Role.CLINIC_ADMINISTRATOR;\r\n    }\r\n  }\r\n\r\n  public isClinicalCentreAdmin() {\r\n    if (this.isLoggedIn()) {\r\n      return this.user.role === Role.CLINICAL_CENTRE_ADMINISTRATOR;\r\n    }\r\n  }\r\n\r\n  public isNone() {\r\n    if (this.isLoggedIn()) {\r\n      return this.user.role === Role.NONE;\r\n    }\r\n  }\r\n\r\n  public whichRole(role: string) {\r\n    if (role === 'PATIENT') {\r\n      return Role.PATIENT;\r\n    } else if (role === 'DOCTOR') {\r\n      return  Role.DOCTOR;\r\n    } else if (role === 'NURSE') {\r\n      return  Role.NURSE;\r\n    } else if (role === 'CLINIC_ADMINISTRATOR') {\r\n      return  Role.CLINIC_ADMINISTRATOR;\r\n    } else if (role === 'CLINICAL_CENTRE_ADMINISTRATOR') {\r\n      return  Role.CLINICAL_CENTRE_ADMINISTRATOR;\r\n    } else {\r\n      return null;\r\n    }\r\n\r\n  }\r\n\r\n  public getAllUsers(): Array<User> {\r\n    this.http.get(this.urlUser + '/all').subscribe((data: User[]) => {\r\n        for (const c of data) {\r\n            this.u = new User(c.email, c.password, this.whichRole(c.role.toString()));\r\n            this.addUser(this.u);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.list);\r\n    return this.list;\r\n  }\r\n\r\n  public setLoggedUser(user: User) {\r\n    this.user = user;\r\n  }\r\n\r\n  public getLoggedUser() {\r\n    return this.user;\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {Zahtev} from '../model/Zahtev';\r\nimport {environment} from '../../environments/environment';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {UserServiceService} from './user-service.service';\r\nimport {ZahtevStatus} from '../model/ZahtevStatus';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VacationService {\r\n\r\n  urlVacation = environment.baseUrl + environment.zahtev;\r\n  listVacation: Array<Zahtev> = new Array<Zahtev>();\r\n  zahtev: Zahtev;\r\n  tmp: Array<Zahtev>;\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserServiceService\r\n  ) {\r\n\r\n     this.getAllVacations();\r\n     this.getAllRequests();\r\n  }\r\n\r\n  public newVacation(zahtev) {\r\n    return this.http.post(this.urlVacation + '/nurse/VacationRequest', zahtev);\r\n  }\r\n\r\n  public newVacation1(zahtev) {\r\n    return this.http.post(this.urlVacation + '/doctor/VacationRequest', zahtev);\r\n  }\r\n\r\n  public addVacation(v: Zahtev) {\r\n    if (this.getVacations(v.email) === null) {\r\n      this.listVacation.push(v);\r\n    }\r\n  }\r\n\r\n  public addVacation1(v: Zahtev) {\r\n    if (this.getVacations(v.email) === null) {\r\n      this.listVacation.push(v);\r\n    }\r\n  }\r\n\r\n  public getVacations(email: string) {\r\n    if ( this.listVacation.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listVacation) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n  public getVacations1(email: string) {\r\n    if ( this.listVacation.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listVacation) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public editVacation(zahtev) {\r\n    return this.http.post(this.urlVacation + '/edit', zahtev, {responseType: 'text'});\r\n  }\r\n\r\n  public setVacation(p: Zahtev) {\r\n\r\n    for (const p1 of this.listVacation) {\r\n      if (p1.email === p.email) {\r\n        p1.name = p.name;\r\n        p1.surname = p.surname;\r\n        p1.startingDate = p.startingDate;\r\n        p1.finishDate = p.finishDate;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public setVacation1(p: Zahtev) {\r\n\r\n    for (const p1 of this.listVacation) {\r\n      if (p1.email === p.email) {\r\n        p1.name = p.name;\r\n        p1.surname = p.surname;\r\n        p1.startingDate = p.startingDate;\r\n        p1.finishDate = p.finishDate;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public whichStatus(status: string) {\r\n    if (status === 'AWAITING_APPROVAL') {\r\n      return ZahtevStatus.AWAITING_APPROVAL;\r\n    } else {\r\n      return ZahtevStatus.APPROVED;\r\n    }\r\n\r\n  }\r\n\r\n  public getAllVacations(): Array<Zahtev> {\r\n    this.http.get(this.urlVacation + '/all').subscribe((data: Zahtev[]) => {\r\n        for (const c of data) {\r\n          this.zahtev = new Zahtev(c.email, c.name, c.surname, c.startingDate, c.finishDate, this.whichStatus(c.status.toString()));\r\n          this.addVacation(this.zahtev);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listVacation;\r\n  }\r\n\r\n  public getAllRequests(): Array<Zahtev> {\r\n    this.http.get(this.urlVacation + '/VacationRequest').subscribe((data: Zahtev[]) => {\r\n        this.tmp = new Array<Zahtev>();\r\n        for (const c of data) {\r\n          this.zahtev = new Zahtev(c.email, c.name, c.surname, c.startingDate, c.finishDate, ZahtevStatus.AWAITING_APPROVAL);\r\n          this.tmp.push(this.zahtev);\r\n          console.log(this.zahtev);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.tmp);\r\n    return this.tmp;\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nimport {ClinicalCentreAdministrator} from '../app/model/ClinicalCentreAdministrator';\r\n\r\nexport const environment = {\r\n  production: false,\r\n  baseUrl: 'http://localhost:8081',\r\n  user: '/user',\r\n  patient: '/patient',\r\n  doctor: '/doctor',\r\n  clinic: '/clinic',\r\n  nurse: '/nurse',\r\n  adminClinic: '/admin_clinic',\r\n  ClinicalCentreAdministrator: '/clinical-centre-admin',\r\n  examination: '/examination',\r\n  medicalRecord: '/medicalRecord',\r\n  examinationType: '/examinationType',\r\n  zahtev: '/zahtev',\r\n  diagnose: '/diagnose',\r\n  medicaments: '/medicaments'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///","file":"main-es5.js"}